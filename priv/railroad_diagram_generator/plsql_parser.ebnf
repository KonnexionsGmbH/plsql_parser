/*
%% -----------------------------------------------------------------------------
%%
%% plsql_parser.ebnf: PL/SQL - grammar definition in ebnf format.
%%
%% Copyright (c) 2018-18 K2 Informatics GmbH.  All Rights Reserved.
%%
%% This file is provided to you under the Apache License,
%% Version 2.0 (the "License"); you may not use this file
%% except in compliance with the License.  You may obtain
%% a copy of the License at
%%
%%   http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing,
%% software distributed under the License is distributed on an
%% "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
%% KIND, either express or implied.  See the License for the
%% specific language governing permissions and limitations
%% under the License.
%%
%% -----------------------------------------------------------------------------
*/

/* =============================================================================
plsqlScript -> plsqlUnit             : ['$1'].
plsqlScript -> plsqlUnit plsqlScript : [['$1'] | '$2'].
============================================================================= */

plsqlScript ::= plsqlUnit+

/* =============================================================================
plsqlUnit -> createPackage : #{plsqlUnit => #{createPackage@ => '$1'}}.
============================================================================= */

plsqlUnit ::= createPackage

/* =============================================================================
createPackage -> CREATE                           PACKAGE plsqlPackageSource ';'     : #{createPackage => #{plsqlPackageSource@ => '$3'}}.
createPackage -> CREATE                           PACKAGE plsqlPackageSource ';' '/' : #{createPackage => #{plsqlPackageSource@ => '$3',
                                                                                                            slash@ => true}}.
createPackage -> CREATE               EDITIONABLE PACKAGE plsqlPackageSource ';'     : #{createPackage => #{editionable@ => unwrap_2_list('$2'),
                                                                                                            plsqlPackageSource@ => '$4'}}.
createPackage -> CREATE               EDITIONABLE PACKAGE plsqlPackageSource ';' '/' : #{createPackage => #{editionable@ => unwrap_2_list('$2'),
                                                                                                            plsqlPackageSource@ => '$4',
                                                                                                            slash@ => true}}.
createPackage -> CREATE            NONEDITIONABLE PACKAGE plsqlPackageSource ';'     : #{createPackage => #{editionable@ => unwrap_2_list('$2'),
                                                                                                            plsqlPackageSource@ => '$4'}}.
createPackage -> CREATE            NONEDITIONABLE PACKAGE plsqlPackageSource ';' '/' : #{createPackage => #{editionable@ => unwrap_2_list('$2'),
                                                                                                            plsqlPackageSource@ => '$4',
                                                                                                            slash@ => true}}.
createPackage -> CREATE OR REPLACE                PACKAGE plsqlPackageSource ';'     : #{createPackage => #{orReplace@ => "OR REPLACE",
                                                                                                            plsqlPackageSource@ => '$5'}}.
createPackage -> CREATE OR REPLACE                PACKAGE plsqlPackageSource ';' '/' : #{createPackage => #{orReplace@ => "OR REPLACE",
                                                                                                            plsqlPackageSource@ => '$5',
                                                                                                            slash@ => true}}.
createPackage -> CREATE OR REPLACE    EDITIONABLE PACKAGE plsqlPackageSource ';'     : #{createPackage => #{orReplace@ => "OR REPLACE",
                                                                                                            editionable@ => unwrap_2_list('$4'),
                                                                                                            plsqlPackageSource@ => '$6'}}.
createPackage -> CREATE OR REPLACE    EDITIONABLE PACKAGE plsqlPackageSource ';' '/' : #{createPackage => #{orReplace@ => "OR REPLACE",
                                                                                                            editionable@ => unwrap_2_list('$4'),
                                                                                                            plsqlPackageSource@ => '$6',
                                                                                                            slash@ => true}}.
createPackage -> CREATE OR REPLACE NONEDITIONABLE PACKAGE plsqlPackageSource ';'     : #{createPackage => #{orReplace@ => "OR REPLACE",
                                                                                                            editionable@ => unwrap_2_list('$4'),
                                                                                                            plsqlPackageSource@ => '$6'}}.
createPackage -> CREATE OR REPLACE NONEDITIONABLE PACKAGE plsqlPackageSource ';' '/' : #{createPackage => #{orReplace@ => "OR REPLACE",
                                                                                                            editionable@ => unwrap_2_list('$4'),
                                                                                                            plsqlPackageSource@ => '$6',
                                                                                                            slash@ => true}}.
============================================================================= */

createPackage ::= 'CREATE' ( 'OR' 'REPLACE' )? ( 'EDITIONABLE' | 'NONEDITIONABLE' )?
                             'PACKAGE' plsqlPackageSource ';' '/'?
                             
/* =============================================================================
plsqlPackageSource ->          NAME                                               as_is          packageItemList END      : #{plsqlPackageSource => #{asIs@ => '$2',
                                                                                                                                                      packageItemList@ => '$3',
                                                                                                                                                      packageNameStart@ => unwrap_2_list('$1')}}.
plsqlPackageSource ->          NAME                                               as_is          packageItemList END NAME : #{plsqlPackageSource => #{asIs@ => '$2',
                                                                                                                                                      packageItemList@ => '$3',
                                                                                                                                                      packageNameEnd@ => unwrap_2_list('$5'),
                                                                                                                                                      packageNameStart@ => unwrap_2_list('$1')}}.
plsqlPackageSource ->          NAME                                               as_is MAN_PAGE packageItemList END      : #{plsqlPackageSource => #{asIs@ => '$2',
                                                                                                                                                      man_page@ => unwrap_2_list('$3'),
                                                                                                                                                      packageItemList@ => '$4',
                                                                                                                                                      packageNameStart@ => unwrap_2_list('$1')}}.
plsqlPackageSource ->          NAME                                               as_is MAN_PAGE packageItemList END NAME : #{plsqlPackageSource => #{asIs@ => '$2',
                                                                                                                                                      man_page@ => unwrap_2_list('$3'),
                                                                                                                                                      packageItemList@ => '$4',
                                                                                                                                                      packageNameEnd@ => unwrap_2_list('$6'),
                                                                                                                                                      packageNameStart@ => unwrap_2_list('$1')}}.
plsqlPackageSource ->          NAME               plsqlPackageSourceAttributeList as_is          packageItemList END      : #{plsqlPackageSource => #{asIs@ => '$3',
                                                                                                                                                      packageItemList@ => '$4',
                                                                                                                                                      packageNameStart@ => unwrap_2_list('$1'),
                                                                                                                                                      plsqlPackageSourceAttributeList@ => '$2'}}.
plsqlPackageSource ->          NAME               plsqlPackageSourceAttributeList as_is          packageItemList END NAME : #{plsqlPackageSource => #{asIs@ => '$3',
                                                                                                                                                      packageItemList@ => '$4',
                                                                                                                                                      packageNameEnd@ => unwrap_2_list('$6'),
                                                                                                                                                      packageNameStart@ => unwrap_2_list('$1'),
                                                                                                                                                      plsqlPackageSourceAttributeList@ => '$2'}}.
plsqlPackageSource ->          NAME               plsqlPackageSourceAttributeList as_is MAN_PAGE packageItemList END      : #{plsqlPackageSource => #{asIs@ => '$3',
                                                                                                                                                      man_page@ => unwrap_2_list('$4'),
                                                                                                                                                      packageItemList@ => '$5',
                                                                                                                                                      packageNameStart@ => unwrap_2_list('$1'),
                                                                                                                                                      plsqlPackageSourceAttributeList@ => '$2'}}.
plsqlPackageSource ->          NAME               plsqlPackageSourceAttributeList as_is MAN_PAGE packageItemList END NAME : #{plsqlPackageSource => #{asIs@ => '$3',
                                                                                                                                                      man_page@ => unwrap_2_list('$4'),
                                                                                                                                                      packageItemList@ => '$5',
                                                                                                                                                      packageNameEnd@ => unwrap_2_list('$7'),
                                                                                                                                                      packageNameStart@ => unwrap_2_list('$1'),
                                                                                                                                                      plsqlPackageSourceAttributeList@ => '$2'}}.
plsqlPackageSource ->          NAME sharingClause                                 as_is          packageItemList END      : #{plsqlPackageSource => #{asIs@ => '$3',
                                                                                                                                                      packageItemList@ => '$4',
                                                                                                                                                      packageNameStart@ => unwrap_2_list('$1'),
                                                                                                                                                      sharingClause@ => '$2'}}.
plsqlPackageSource ->          NAME sharingClause                                 as_is          packageItemList END NAME : #{plsqlPackageSource => #{asIs@ => '$3',
                                                                                                                                                      packageItemList@ => '$4',
                                                                                                                                                      packageNameEnd@ => unwrap_2_list('$6'),
                                                                                                                                                      packageNameStart@ => unwrap_2_list('$1'),
                                                                                                                                                      sharingClause@ => '$2'}}.
plsqlPackageSource ->          NAME sharingClause                                 as_is MAN_PAGE packageItemList END      : #{plsqlPackageSource => #{asIs@ => '$3',
                                                                                                                                                      man_page@ => unwrap_2_list('$4'),
                                                                                                                                                      packageItemList@ => '$5',
                                                                                                                                                      packageNameStart@ => unwrap_2_list('$1'),
                                                                                                                                                      sharingClause@ => '$2'}}.
plsqlPackageSource ->          NAME sharingClause                                 as_is MAN_PAGE packageItemList END NAME : #{plsqlPackageSource => #{asIs@ => '$3',
                                                                                                                                                      man_page@ => unwrap_2_list('$4'),
                                                                                                                                                      packageItemList@ => '$5',
                                                                                                                                                      packageNameEnd@ => unwrap_2_list('$7'),
                                                                                                                                                      packageNameStart@ => unwrap_2_list('$1'),
                                                                                                                                                      sharingClause@ => '$2'}}.
plsqlPackageSource ->          NAME sharingClause plsqlPackageSourceAttributeList as_is          packageItemList END      : #{plsqlPackageSource => #{asIs@ => '$4',
                                                                                                                                                      packageItemList@ => '$5',
                                                                                                                                                      packageNameStart@ => unwrap_2_list('$1'),
                                                                                                                                                      plsqlPackageSourceAttributeList@ => '$3',
                                                                                                                                                      sharingClause@ => '$2'}}.
plsqlPackageSource ->          NAME sharingClause plsqlPackageSourceAttributeList as_is          packageItemList END NAME : #{plsqlPackageSource => #{asIs@ => '$4',
                                                                                                                                                      packageItemList@ => '$5',
                                                                                                                                                      packageNameEnd@ => unwrap_2_list('$7'),
                                                                                                                                                      packageNameStart@ => unwrap_2_list('$1'),
                                                                                                                                                      plsqlPackageSourceAttributeList@ => '$3',
                                                                                                                                                      sharingClause@ => '$2'}}.
plsqlPackageSource ->          NAME sharingClause plsqlPackageSourceAttributeList as_is MAN_PAGE packageItemList END      : #{plsqlPackageSource => #{asIs@ => '$4',
                                                                                                                                                      man_page@ => unwrap_2_list('$5'),
                                                                                                                                                      packageItemList@ => '$6',
                                                                                                                                                      packageNameStart@ => unwrap_2_list('$1'),
                                                                                                                                                      plsqlPackageSourceAttributeList@ => '$3',
                                                                                                                                                      sharingClause@ => '$2'}}.
plsqlPackageSource ->          NAME sharingClause plsqlPackageSourceAttributeList as_is MAN_PAGE packageItemList END NAME : #{plsqlPackageSource => #{asIs@ => '$4',
                                                                                                                                                      man_page@ => unwrap_2_list('$5'),
                                                                                                                                                      packageItemList@ => '$6',
                                                                                                                                                      packageNameEnd@ => unwrap_2_list('$8'),
                                                                                                                                                      packageNameStart@ => unwrap_2_list('$1'),
                                                                                                                                                      plsqlPackageSourceAttributeList@ => '$3',
                                                                                                                                                      sharingClause@ => '$2'}}.
plsqlPackageSource -> NAME '.' NAME                                               as_is          packageItemList END      : #{plsqlPackageSource => #{asIs@ => '$4',
                                                                                                                                                      packageItemList@ => '$5',
                                                                                                                                                      packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')])}}.
plsqlPackageSource -> NAME '.' NAME                                               as_is          packageItemList END NAME : #{plsqlPackageSource => #{asIs@ => '$4',
                                                                                                                                                      packageItemList@ => '$5',
                                                                                                                                                      packageNameEnd@ => unwrap_2_list('$7'),
                                                                                                                                                      packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')])}}.
plsqlPackageSource -> NAME '.' NAME                                               as_is MAN_PAGE packageItemList END      : #{plsqlPackageSource => #{asIs@ => '$4',
                                                                                                                                                      man_page@ => unwrap_2_list('$5'),
                                                                                                                                                      packageItemList@ => '$6',
                                                                                                                                                      packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')])}}.
plsqlPackageSource -> NAME '.' NAME                                               as_is MAN_PAGE packageItemList END NAME : #{plsqlPackageSource => #{asIs@ => '$4',
                                                                                                                                                      man_page@ => unwrap_2_list('$5'),
                                                                                                                                                      packageItemList@ => '$6',
                                                                                                                                                      packageNameEnd@ => unwrap_2_list('$8'),
                                                                                                                                                      packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')])}}.
plsqlPackageSource -> NAME '.' NAME               plsqlPackageSourceAttributeList as_is          packageItemList END      : #{plsqlPackageSource => #{asIs@ => '$5',
                                                                                                                                                      packageItemList@ => '$6',
                                                                                                                                                      packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
                                                                                                                                                      plsqlPackageSourceAttributeList@ => '$4'}}.
plsqlPackageSource -> NAME '.' NAME               plsqlPackageSourceAttributeList as_is          packageItemList END NAME : #{plsqlPackageSource => #{asIs@ => '$5',
                                                                                                                                                      packageItemList@ => '$6',
                                                                                                                                                      packageNameEnd@ => unwrap_2_list('$8'),
                                                                                                                                                      packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
                                                                                                                                                      plsqlPackageSourceAttributeList@ => '$4'}}.
plsqlPackageSource -> NAME '.' NAME               plsqlPackageSourceAttributeList as_is MAN_PAGE packageItemList END      : #{plsqlPackageSource => #{asIs@ => '$5',
                                                                                                                                                      man_page@ => unwrap_2_list('$6'),
                                                                                                                                                      packageItemList@ => '$7',
                                                                                                                                                      packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
                                                                                                                                                      plsqlPackageSourceAttributeList@ => '$4'}}.
plsqlPackageSource -> NAME '.' NAME               plsqlPackageSourceAttributeList as_is MAN_PAGE packageItemList END NAME : #{plsqlPackageSource => #{asIs@ => '$5',
                                                                                                                                                      man_page@ => unwrap_2_list('$6'),
                                                                                                                                                      packageItemList@ => '$7',
                                                                                                                                                      packageNameEnd@ => unwrap_2_list('$9'),
                                                                                                                                                      packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
                                                                                                                                                      plsqlPackageSourceAttributeList@ => '$4'}}.
plsqlPackageSource -> NAME '.' NAME sharingClause                                 as_is          packageItemList END      : #{plsqlPackageSource => #{asIs@ => '$5',
                                                                                                                                                      packageItemList@ => '$6',
                                                                                                                                                      packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
                                                                                                                                                      sharingClause@ => '$4'}}.
plsqlPackageSource -> NAME '.' NAME sharingClause                                 as_is          packageItemList END NAME : #{plsqlPackageSource => #{asIs@ => '$5',
                                                                                                                                                      packageItemList@ => '$6',
                                                                                                                                                      packageNameEnd@ => unwrap_2_list('$8'),
                                                                                                                                                      packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
                                                                                                                                                      sharingClause@ => '$4'}}.
plsqlPackageSource -> NAME '.' NAME sharingClause                                 as_is MAN_PAGE packageItemList END      : #{plsqlPackageSource => #{asIs@ => '$5',
                                                                                                                                                      man_page@ => unwrap_2_list('$6'),
                                                                                                                                                      packageItemList@ => '$7',
                                                                                                                                                      packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
                                                                                                                                                      sharingClause@ => '$4'}}.
plsqlPackageSource -> NAME '.' NAME sharingClause                                 as_is MAN_PAGE packageItemList END NAME : #{plsqlPackageSource => #{asIs@ => '$5',
                                                                                                                                                      man_page@ => unwrap_2_list('$6'),
                                                                                                                                                      packageItemList@ => '$7',
                                                                                                                                                      packageNameEnd@ => unwrap_2_list('$9'),
                                                                                                                                                      packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
                                                                                                                                                      sharingClause@ => '$4'}}.
plsqlPackageSource -> NAME '.' NAME sharingClause plsqlPackageSourceAttributeList as_is          packageItemList END      : #{plsqlPackageSource => #{asIs@ => '$6',
                                                                                                                                                      packageItemList@ => '$7',
                                                                                                                                                      packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
                                                                                                                                                      plsqlPackageSourceAttributeList@ => '$5',
                                                                                                                                                      sharingClause@ => '$4'}}.
plsqlPackageSource -> NAME '.' NAME sharingClause plsqlPackageSourceAttributeList as_is          packageItemList END NAME : #{plsqlPackageSource => #{asIs@ => '$6',
                                                                                                                                                      packageItemList@ => '$7',
                                                                                                                                                      packageNameEnd@ => unwrap_2_list('$9'),
                                                                                                                                                      packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
                                                                                                                                                      plsqlPackageSourceAttributeList@ => '$5',
                                                                                                                                                      sharingClause@ => '$4'}}.
plsqlPackageSource -> NAME '.' NAME sharingClause plsqlPackageSourceAttributeList as_is MAN_PAGE packageItemList END      : #{plsqlPackageSource => #{asIs@ => '$6',
                                                                                                                                                      man_page@ => unwrap_2_list('$7'),
                                                                                                                                                      packageItemList@ => '$8',
                                                                                                                                                      packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
                                                                                                                                                      plsqlPackageSourceAttributeList@ => '$5',
                                                                                                                                                      sharingClause@ => '$4'}}.
plsqlPackageSource -> NAME '.' NAME sharingClause plsqlPackageSourceAttributeList as_is MAN_PAGE packageItemList END NAME : #{plsqlPackageSource => #{asIs@ => '$6',
                                                                                                                                                      man_page@ => unwrap_2_list('$7'),
                                                                                                                                                      packageItemList@ => '$8',
                                                                                                                                                      packageNameEnd@ => unwrap_2_list('$10'),
                                                                                                                                                      packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
                                                                                                                                                      plsqlPackageSourceAttributeList@ => '$5',
                                                                                                                                                      sharingClause@ => '$4'}}.

privilegeAnnotationList -> apiGroupAnnotation                                : ['$1'].
privilegeAnnotationList -> apiGroupAnnotation        privilegeAnnotationList : ['$1' | '$2'].
privilegeAnnotationList -> objectPrivilegeAnnotation                         : ['$1'].
privilegeAnnotationList -> objectPrivilegeAnnotation privilegeAnnotationList : ['$1' | '$2'].
privilegeAnnotationList -> systemPrivilegeAnnotation                         : ['$1'].
privilegeAnnotationList -> systemPrivilegeAnnotation privilegeAnnotationList : ['$1' | '$2'].
============================================================================= */

plsqlPackageSource ::= ( NAME '.' )? NAME sharingClause? plsqlPackageSourceAttribute*
                                     ( 'IS' | 'AS' ) MAN_PAGE? ( packageItemSimple | packageItemConditional )+ 'END' ( NAME )?
                                     
privilegeRoleAnnotationList ::= ( apiGroupAnnotation | objectPrivilegeAnnotation | systemPrivilegeAnnotation )+

/* =============================================================================
apiGroupAnnotation -> '--<>' API_GROUP '=' NAME : #{apiGroupAnnotation => #{apiGroup@ => unwrap_2_list('$4'),
                                                                            type@ => unwrap_2_list('$2')}}.

as_is -> AS : unwrap_2_list('$1').
as_is -> IS : unwrap_2_list('$1').

objectPrivilegeAnnotation -> '--<>' OBJECT_PRIVILEGE objectPrivilegeType '=' NAME          : #{objectPrivilegeAnnotation => #{type@ => unwrap_2_list('$2'),
                                                                                                                              object@ => unwrap_2_list('$5'),
                                                                                                                              privilegeType@ => '$3'}}.
objectPrivilegeAnnotation -> '--<>' OBJECT_PRIVILEGE objectPrivilegeType '=' NAME '.' NAME : #{objectPrivilegeAnnotation => #{type@ => unwrap_2_list('$2'),
                                                                                                                              object@ => lists:append([unwrap_2_list('$5'), ".", unwrap_2_list('$7')]),
                                                                                                                              privilegeType@ => '$3'}}.

systemPrivilegeAnnotation -> '--<>' SYSTEM_PRIVILEGE '=' systemPrivilegeType : #{systemPrivilegeAnnotation => #{type@ => unwrap_2_list('$2'),
                                                                                                                privilegeType@ => '$4'}}.

============================================================================= */

apiGroupAnnotation ::= '--<>' 'API_GROUP' '=' NAME

as_is ::= 'AS' | 'IS'

objectPrivilegeAnnotation ::= '--<>' 'OBJECT_PRIVILEGE' objectPrivilegeType '=' ( NAME '.' )? NAME

systemPrivilegeAnnotation ::= '--<>' 'SYSTEM_PRIVILEGE' '=' systemPrivilegeType

/* =============================================================================
objectPrivilegeType -> NAME           : unwrap_2_list('$1').
objectPrivilegeType -> NAME NAME      : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
objectPrivilegeType -> NAME NAME NAME : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).

packageItem -> itemDeclaration             : '$1'.
packageItem -> packageFunctionDeclaration  : '$1'.
packageItem -> packageProcedureDeclaration : '$1'.
packageItem -> typeDefinition              : '$1'.

packageItemList -> packageItemSimple                      : ['$1'].
packageItemList -> packageItemConditional                 : ['$1'].
packageItemList -> packageItemSimple      packageItemList : ['$1' | '$2'].
packageItemList -> packageItemConditional packageItemList : ['$1' | '$2'].

plsqlPackageSourceAttributeList -> plsqlPackageSourceAttribute                                 : ['$1'].
plsqlPackageSourceAttributeList -> plsqlPackageSourceAttribute plsqlPackageSourceAttributeList : ['$1' | '$2'].

sharingClause -> SHARING '=' METADATA : #{sharingClause => unwrap_2_list('$3')}.
sharingClause -> SHARING '=' NONE     : #{sharingClause => unwrap_2_list('$3')}.

systemPrivilegeType -> CREATE ANY       NAME      : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
systemPrivilegeType -> CREATE NAME                : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
systemPrivilegeType -> CREATE NAME      NAME      : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
systemPrivilegeType -> CREATE PROCEDURE           : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
systemPrivilegeType -> CREATE TABLE               : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
systemPrivilegeType -> CREATE TRIGGER             : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
systemPrivilegeType -> CREATE TYPE                : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
systemPrivilegeType -> NAME                       : unwrap_2_list('$1').
systemPrivilegeType -> NAME   ANY       NAME      : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
systemPrivilegeType -> NAME   ANY       NAME NAME : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3'), " ", unwrap_2_list('$4')]).
systemPrivilegeType -> NAME   ANY       PROCEDURE : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
systemPrivilegeType -> NAME   ANY       TABLE     : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
systemPrivilegeType -> NAME   ANY       TRIGGER   : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
systemPrivilegeType -> NAME   ANY       TYPE      : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
systemPrivilegeType -> NAME   NAME                : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
systemPrivilegeType -> NAME   NAME      NAME      : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
systemPrivilegeType -> NAME   NAME      NAME NAME : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3'), " ", unwrap_2_list('$4')]).
============================================================================= */

objectPrivilegeType ::= NAME
                      | ( NAME NAME )
                      | ( NAME NAME NAME )

packageItem ::= itemDeclaration
              | packageFunctionDeclaration
              | packageProcedureDeclaration
              | typeDefinition

sharingClause ::= 'SHARING' '=' ( 'METADATA' | 'NONE' )

systemPrivilegeType ::= NAME
                      | ( 'CREATE' ( NAME | 'PROCEDURE' | 'TABLE' | 'TRIGGER' | 'TYPE' ) )
                      | ( NAME NAME )
                      | ( 'CREATE' ( 'ANY' | NAME ) NAME )
                      | ( NAME ( 'ANY' | NAME ) NAME )
                      | ( NAME 'ANY' 'TABLE' )
                      | ( NAME ( 'ANY' | NAME ) NAME NAME )

/* =============================================================================
accessibleByClause -> ACCESSIBLE BY '(' accessorCommaList ')' : #{accessibleByClause => #{accessorCommaList@ => '$4'}}.

constantDeclaration -> NAME CONSTANT dataType           default ';' : #{type => "Constant",
                                                                        constantDeclaration => #{constantName@ => #{constantName => unwrap_2_list('$1')},
                                                                                                 dataType@ => '$3',
                                                                                                 default@ => '$4'}}.
defaultCollationClause -> DEFAULT COLLATION USING_NLS_COMP : #{defaultCollationClause => lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')])}.

invokerRightsClause -> AUTHID CURRENT_USER : #{invokerRightsClause => unwrap_2_list('$2')}.
invokerRightsClause -> AUTHID DEFINER      : #{invokerRightsClause => unwrap_2_list('$2')}.

itemDeclaration -> constantDeclaration  : '$1'.
itemDeclaration -> exceptionDeclaration : '$1'.
itemDeclaration -> variableDeclaration  : '$1'.


packageFunctionDeclaration ->                                        functionHeading                                                  ';' : #{type => "Function",
                                                                                                                                              packageFunctionDeclaration  => #{functionHeading@ => '$1'}}.
packageFunctionDeclaration ->                                        functionHeading                                         MAN_PAGE ';' : #{type => "Function",
                                                                                                                                              packageFunctionDeclaration  => #{functionHeading@ => '$1',
                                                                                                                                                                               man_page@ => unwrap_2_list('$2')}}.
packageFunctionDeclaration ->                                        functionHeading packageFunctionDeclarationAttributeList          ';' : #{type => "Function",
                                                                                                                                              packageFunctionDeclaration  => #{functionHeading@ => '$1',
                                                                                                                                                                               packageFunctionDeclarationAttributeList@ => '$2'}}.
packageFunctionDeclaration ->                                        functionHeading packageFunctionDeclarationAttributeList MAN_PAGE ';' : #{type => "Function",
                                                                                                                                              packageFunctionDeclaration  => #{functionHeading@ => '$1',
                                                                                                                                                                               man_page@ => unwrap_2_list('$3'),
                                                                                                                                                                               packageFunctionDeclarationAttributeList@ => '$2'}}.
packageFunctionDeclaration ->                     functionAnnotation functionHeading                                                  ';' : #{type => "Function",
                                                                                                                                              packageFunctionDeclaration  => #{functionAnnotation@ => '$1',
                                                                                                                                                                               functionHeading@ => '$2'}}.
packageFunctionDeclaration ->                     functionAnnotation functionHeading                                         MAN_PAGE ';' : #{type => "Function",
                                                                                                                                              packageFunctionDeclaration  => #{functionAnnotation@ => '$1',
                                                                                                                                                                               man_page@ => unwrap_2_list('$3'),
                                                                                                                                                                               functionHeading@ => '$2'}}.
packageFunctionDeclaration ->                     functionAnnotation functionHeading packageFunctionDeclarationAttributeList          ';' : #{packageFunctionDeclaration  => #{functionAnnotation@ => '$1',
                                                                                                                                                                               functionHeading@ => '$2',
                                                                                                                                                                               packageFunctionDeclarationAttributeList@ => '$3'}}.
packageFunctionDeclaration ->                     functionAnnotation functionHeading packageFunctionDeclarationAttributeList MAN_PAGE ';' : #{type => "Function",
                                                                                                                                              packageFunctionDeclaration  => #{functionAnnotation@ => '$1',
                                                                                                                                                                               functionHeading@ => '$2',
                                                                                                                                                                               man_page@ => unwrap_2_list('$4'),
                                                                                                                                                                               packageFunctionDeclarationAttributeList@ => '$3'}}.
packageFunctionDeclaration -> apiHiddenAnnotation                    functionHeading                                                  ';' : #{type => "Function",
                                                                                                                                              packageFunctionDeclaration  => #{apiHiddenAnnotation@ => '$1',
                                                                                                                                                                               functionHeading@ => '$2'}}.
packageFunctionDeclaration -> apiHiddenAnnotation                    functionHeading                                         MAN_PAGE ';' : #{type => "Function",
                                                                                                                                              packageFunctionDeclaration  => #{apiHiddenAnnotation@ => '$1',
                                                                                                                                                                               man_page@ => unwrap_2_list('$3'),
                                                                                                                                                                               functionHeading@ => '$2'}}.
packageFunctionDeclaration -> apiHiddenAnnotation                    functionHeading packageFunctionDeclarationAttributeList          ';' : #{type => "Function",
                                                                                                                                              packageFunctionDeclaration  => #{apiHiddenAnnotation@ => '$1',
                                                                                                                                                                               functionHeading@ => '$2',
                                                                                                                                                                               packageFunctionDeclarationAttributeList@ => '$3'}}.
packageFunctionDeclaration -> apiHiddenAnnotation                    functionHeading packageFunctionDeclarationAttributeList MAN_PAGE ';' : #{type => "Function",
                                                                                                                                              packageFunctionDeclaration  => #{apiHiddenAnnotation@ => '$1',
                                                                                                                                                                               functionHeading@ => '$2',
                                                                                                                                                                               man_page@ => unwrap_2_list('$4'),
                                                                                                                                                                               packageFunctionDeclarationAttributeList@ => '$3'}}.
packageFunctionDeclaration -> apiHiddenAnnotation functionAnnotation functionHeading                                                  ';' : #{type => "Function",
                                                                                                                                              packageFunctionDeclaration  => #{apiHiddenAnnotation@ => '$1',
                                                                                                                                                                               functionAnnotation@ => '$2',
                                                                                                                                                                               functionHeading@ => '$3'}}.
packageFunctionDeclaration -> apiHiddenAnnotation functionAnnotation functionHeading                                         MAN_PAGE ';' : #{type => "Function",
                                                                                                                                              packageFunctionDeclaration  => #{apiHiddenAnnotation@ => '$1',
                                                                                                                                                                               functionAnnotation@ => '$2',
                                                                                                                                                                               functionHeading@ => '$3',
                                                                                                                                                                               man_page@ => unwrap_2_list('$4')}}.
packageFunctionDeclaration -> apiHiddenAnnotation functionAnnotation functionHeading packageFunctionDeclarationAttributeList          ';' : #{type => "Function",
                                                                                                                                              packageFunctionDeclaration  => #{apiHiddenAnnotation@ => '$1',
                                                                                                                                                                               functionAnnotation@ => '$2',
                                                                                                                                                                               functionHeading@ => '$3',
                                                                                                                                                                               packageFunctionDeclarationAttributeList@ => '$4'}}.
packageFunctionDeclaration -> apiHiddenAnnotation functionAnnotation functionHeading packageFunctionDeclarationAttributeList MAN_PAGE ';' : #{type => "Function",
                                                                                                                                              packageFunctionDeclaration  => #{apiHiddenAnnotation@ => '$1',
                                                                                                                                                                               functionAnnotation@ => '$2',
                                                                                                                                                                               functionHeading@ => '$3',
                                                                                                                                                                               man_page@ => unwrap_2_list('$5'),
                                                                                                                                                                               packageFunctionDeclarationAttributeList@ => '$4'}}.

packageItemConditional -> '$ELSE'                     packageItem  '$END' : #{packageItemConditional => #{start@ => unwrap_2_list('$1'),
                                                                                                          packageItem@ => '$2',
                                                                                                          end@ => unwrap_2_list('$3')}}.
packageItemConditional -> '$ELSIF' expression '$THEN' packageItem         : #{packageItemConditional => #{start@ => unwrap_2_list('$1'),
                                                                                                          expression@ => '$2',
                                                                                                          packageItem@ => '$4'}}.
packageItemConditional -> '$ELSIF' expression '$THEN' packageItem  '$END' : #{packageItemConditional => #{start@ => unwrap_2_list('$1'),
                                                                                                          expression@ => '$2',
                                                                                                          packageItem@ => '$4',
                                                                                                          end@ => unwrap_2_list('$5')}}.
packageItemConditional -> '$IF'    expression '$THEN' packageItem         : #{packageItemConditional => #{start@ => unwrap_2_list('$1'),
                                                                                                          expression@ => '$2',
                                                                                                          packageItem@ => '$4'}}.
packageItemConditional -> '$IF'    expression '$THEN' packageItem  '$END' : #{packageItemConditional => #{start@ => unwrap_2_list('$1'),
                                                                                                          expression@ => '$2',
                                                                                                          packageItem@ => '$4',
                                                                                                          end@ => unwrap_2_list('$5')}}.

packageItemSimple -> packageItem : #{packageItemSimple => #{packageItem@ => '$1'}}.

plsqlPackageSourceAttribute -> accessibleByClause     : #{plsqlPackageSourceAttribute => '$1'}.
plsqlPackageSourceAttribute -> defaultCollationClause : #{plsqlPackageSourceAttribute => '$1'}.
plsqlPackageSourceAttribute -> invokerRightsClause    : #{plsqlPackageSourceAttribute => '$1'}.

packageProcedureDeclaration ->                                         procedureHeading                             ';' : #{type => "Procedure",
                                                                                                                            packageProcedureDeclaration  => #{procedureHeading@ => '$1'}}.
packageProcedureDeclaration ->                                         procedureHeading                    MAN_PAGE ';' : #{type => "Procedure",
                                                                                                                            packageProcedureDeclaration  => #{man_page@ => unwrap_2_list('$2'),
                                                                                                                                                              procedureHeading@ => '$1'}}.
packageProcedureDeclaration ->                                         procedureHeading accessibleByClause          ';' : #{type => "Procedure",
                                                                                                                            packageProcedureDeclaration  => #{accessibleByClause@ => '$2',
                                                                                                                                                              procedureHeading@ => '$1'}}.
packageProcedureDeclaration ->                                         procedureHeading accessibleByClause MAN_PAGE ';' : #{type => "Procedure",
                                                                                                                            packageProcedureDeclaration  => #{accessibleByClause@ => '$2',
                                                                                                                                                              man_page@ => unwrap_2_list('$3'),
                                                                                                                                                              procedureHeading@ => '$1'}}.
packageProcedureDeclaration ->                     procedureAnnotation procedureHeading                             ';' : #{type => "Procedure",
                                                                                                                            packageProcedureDeclaration  => #{procedureAnnotation@ => '$1',
                                                                                                                                                              procedureHeading@ => '$2'}}.
packageProcedureDeclaration ->                     procedureAnnotation procedureHeading                    MAN_PAGE ';' : #{type => "Procedure",
                                                                                                                            packageProcedureDeclaration  => #{man_page@ => unwrap_2_list('$3'),
                                                                                                                                                              procedureAnnotation@ => '$1',
                                                                                                                                                              procedureHeading@ => '$2'}}.
packageProcedureDeclaration ->                     procedureAnnotation procedureHeading accessibleByClause          ';' : #{type => "Procedure",
                                                                                                                            packageProcedureDeclaration  => #{accessibleByClause@ => '$3',
                                                                                                                                                              procedureAnnotation@ => '$1',
                                                                                                                                                              procedureHeading@ => '$2'}}.
packageProcedureDeclaration ->                     procedureAnnotation procedureHeading accessibleByClause MAN_PAGE ';' : #{type => "Procedure",
                                                                                                                            packageProcedureDeclaration  => #{accessibleByClause@ => '$3',
                                                                                                                                                              man_page@ => unwrap_2_list('$4'),
                                                                                                                                                              procedureAnnotation@ => '$1',
                                                                                                                                                              procedureHeading@ => '$2'}}.
packageProcedureDeclaration -> apiHiddenAnnotation                     procedureHeading                             ';' : #{type => "Procedure",
                                                                                                                            packageProcedureDeclaration  => #{apiHiddenAnnotation@ => '$1',
                                                                                                                                                              procedureHeading@ => '$2'}}.
packageProcedureDeclaration -> apiHiddenAnnotation                     procedureHeading                    MAN_PAGE ';' : #{type => "Procedure",
                                                                                                                            packageProcedureDeclaration  => #{apiHiddenAnnotation@ => '$1',
                                                                                                                                                              man_page@ => unwrap_2_list('$3'),
                                                                                                                                                              procedureHeading@ => '$2'}}.
packageProcedureDeclaration -> apiHiddenAnnotation                     procedureHeading accessibleByClause          ';' : #{type => "Procedure",
                                                                                                                            packageProcedureDeclaration  => #{apiHiddenAnnotation@ => '$1',
                                                                                                                                                              procedureHeading@ => '$2',
                                                                                                                                                              accessibleByClause@ => '$3'}}.
packageProcedureDeclaration -> apiHiddenAnnotation                     procedureHeading accessibleByClause MAN_PAGE ';' : #{type => "Procedure",
                                                                                                                            packageProcedureDeclaration  => #{apiHiddenAnnotation@ => '$1',
                                                                                                                                                              man_page@ => unwrap_2_list('$4'),
                                                                                                                                                              procedureHeading@ => '$2',
                                                                                                                                                              accessibleByClause@ => '$3'}}.
packageProcedureDeclaration -> apiHiddenAnnotation procedureAnnotation procedureHeading                             ';' : #{type => "Procedure",
                                                                                                                            packageProcedureDeclaration  => #{apiHiddenAnnotation@ => '$1',
                                                                                                                                                              procedureAnnotation@ => '$2',
                                                                                                                                                              procedureHeading@ => '$3'}}.
packageProcedureDeclaration -> apiHiddenAnnotation procedureAnnotation procedureHeading                    MAN_PAGE ';' : #{type => "Procedure",
                                                                                                                            packageProcedureDeclaration  => #{apiHiddenAnnotation@ => '$1',
                                                                                                                                                              man_page@ => unwrap_2_list('$4'),
                                                                                                                                                              procedureAnnotation@ => '$2',
                                                                                                                                                              procedureHeading@ => '$3'}}.
packageProcedureDeclaration -> apiHiddenAnnotation procedureAnnotation procedureHeading accessibleByClause          ';' : #{type => "Procedure",
                                                                                                                            packageProcedureDeclaration  => #{apiHiddenAnnotation@ => '$1',
                                                                                                                                                              procedureAnnotation@ => '$2',
                                                                                                                                                              procedureHeading@ => '$3',
                                                                                                                                                              accessibleByClause@ => '$4'}}.
packageProcedureDeclaration -> apiHiddenAnnotation procedureAnnotation procedureHeading accessibleByClause MAN_PAGE ';' : #{type => "Procedure",
                                                                                                                            packageProcedureDeclaration  => #{apiHiddenAnnotation@ => '$1',
                                                                                                                                                              man_page@ => unwrap_2_list('$5'),
                                                                                                                                                              procedureAnnotation@ => '$2',
                                                                                                                                                              procedureHeading@ => '$3',
                                                                                                                                                              accessibleByClause@ => '$4'}}.
typeDefinition -> collectionTypeDefinition : '$1'.
typeDefinition -> recordTypeDefinition     : '$1'.
typeDefinition -> refCursorTypeDefinition  : '$1'.
typeDefinition -> subtypeDefinition        : '$1'.

============================================================================= */

accessibleByClause ::= 'ACCESSIBLE' 'BY' '(' accessor+ ')'

defaultCollationClause ::= 'DEFAULT' 'COLLATION' 'USING_NLS_COMP'

invokerRightsClause ::= 'AUTHID' ( 'CURRENT_USER' | 'DEFINER' )

itemDeclaration ::= constantDeclaration
                  | exceptionDeclaration
                  | variableDeclaration

packageFunctionDeclaration ::= apiHiddenAnnotation? functionAnnotation? functionHeading packageFunctionDeclarationAttribute* 'MAN_PAGE'? ';'

packageItemConditional ::= ( ( '$IF' | '$ELSIF' ) expression '$THEN' packageItem '$END'? )
                         | ( '$ELSE' packageItem  '$END' )

packageItemSimple ::= packageItem

plsqlPackageSourceAttribute ::= accessibleByClause
                              | defaultCollationClause
                              | invokerRightsClause

packageProcedureDeclaration ::= apiHiddenAnnotation? procedureAnnotation? procedureHeading accessibleByClause? 'MAN_PAGE'? ';'

typeDefinition ::= collectionTypeDefinition
                 | recordTypeDefinition
                 | refCursorTypeDefinition
                 | subtypeDefinition

/* =============================================================================
accessorCommaList -> accessor                       : ['$1'].
accessorCommaList -> accessor ',' accessorCommaList : ['$1' | '$3'].

collectionTypeDefinition -> TYPE NAME IS assocArrayTypeDef ';' : #{type => "CollectionType",
                                                                   collectionTypeDefinition => #{typeName@ => #{typeName => unwrap_2_list('$2')},
                                                                                                 assocArrayTypeDef@ => '$4'}}.
collectionTypeDefinition -> TYPE NAME IS varrayTypeDef     ';' : #{type => "CollectionType",
                                                                   collectionTypeDefinition => #{typeName@ => #{typeName => unwrap_2_list('$2')},
                                                                                                 varrayTypeDef@ => '$4'}}.

constantDeclaration -> NAME CONSTANT dataType_1           default ';' : #{type => "Constant",
                                                                          constantDeclaration => #{constantName@ => #{constantName => unwrap_2_list('$1')},
                                                                                                   dataType@ => '$3',
                                                                                                   default@ => '$4'}}.
constantDeclaration -> NAME CONSTANT dataType_1 NOT NULLX default ';' : #{type => "Constant",
                                                                          constantDeclaration => #{constantName@ => #{constantName => unwrap_2_list('$1')},
                                                                                                   dataType@ => '$3',
                                                                                                   notNull@ => #{notNull => "not null"},
                                                                                                   default@ => '$6'}}.
constantDeclaration -> NAME CONSTANT dataType_2           default ';' : #{type => "Constant",
                                                                          constantDeclaration => #{constantName@ => #{constantName => unwrap_2_list('$1')},
                                                                                                   dataType@ => '$3',
                                                                                                   default@ => '$4'}}.
constantDeclaration -> NAME CONSTANT dataType_2 NOT NULLX default ';' : #{type => "Constant",
                                                                          constantDeclaration => #{constantName@ => #{constantName => unwrap_2_list('$1')},
                                                                                                   dataType@ => '$3',
                                                                                                   notNull@ => #{notNull => "not null"},
                                                                                                   default@ => '$6'}}.

exceptionDeclaration -> NAME EXCEPTION ';' : #{type => "Exception",
                                               exceptionDeclaration => unwrap_2_list('$1')}.

fieldDefinitionCommaList -> fieldDefinition                              : ['$1'].
fieldDefinitionCommaList -> fieldDefinition ',' fieldDefinitionCommaList : ['$1' | '$3'].

functionAnnotation -> privilegeAnnotationList : #{functionAnnotation => #{privilegeAnnotationList@ => '$1'}}.


functionHeading -> FUNCTION nameExtended                                       RETURN dataType_1 : #{functionHeading => #{name@ => '$2',
                                                                                                                          return@ => '$4'}}.
functionHeading -> FUNCTION nameExtended                                       RETURN dataType_2 : #{functionHeading => #{name@ => '$2',
                                                                                                                          return@ => '$4'}}.
functionHeading -> FUNCTION nameExtended '(' parameterDeclarationCommaList ')' RETURN dataType_1 : #{functionHeading => #{name@ => '$2',
                                                                                                                          parameterDeclarationCommaList@ => '$4',
                                                                                                                          return@ => '$7'}}.
functionHeading -> FUNCTION nameExtended '(' parameterDeclarationCommaList ')' RETURN dataType_2 : #{functionHeading => #{name@ => '$2',
                                                                                                                          parameterDeclarationCommaList@ => '$4',
                                                                                                                          return@ => '$7'}}.

packageFunctionDeclarationAttributeList -> packageFunctionDeclarationAttribute                                         : ['$1'].
packageFunctionDeclarationAttributeList -> packageFunctionDeclarationAttribute packageFunctionDeclarationAttributeList : ['$1' | '$2'].

procedureAnnotation -> privilegeAnnotationList : #{procedureAnnotation => #{privilegeAnnotationList@ => '$1'}}.

procedureHeading -> PROCEDURE NAME                                       : #{procedureHeading => #{name@ => unwrap_2_list('$2')}}.
procedureHeading -> PROCEDURE NAME '(' parameterDeclarationCommaList ')' : #{procedureHeading => #{name@ => unwrap_2_list('$2'),
                                                                                                   parameterDeclarationCommaList@ => '$4'}}.
recordTypeDefinition -> TYPE NAME IS RECORD '(' fieldDefinitionCommaList ')' ';' : #{type => "RecordType",
                                                                                     recordTypeDefinition => #{recordTypeName@ => #{typeName => unwrap_2_list('$2')},
                                                                                                               fieldDefinitionCommaList@ => '$6'}}.

refCursorTypeDefinition -> TYPE NAME IS REF CURSOR RETURN NAME                              ';' : #{type => "RefCursorType",
                                                                                                    refCursorTypeDefinition => #{name@ => unwrap_2_list('$2'),
                                                                                                    type@ => unwrap_2_list('$7')}}.
refCursorTypeDefinition -> TYPE NAME IS REF CURSOR RETURN NAME                   '%ROWTYPE' ';' : #{type => "RefCursorType",
                                                                                                    refCursorTypeDefinition => #{name@ => unwrap_2_list('$2'),
                                                                                                    type@ => unwrap_2_list('$7'),
                                                                                                    attribute@ => unwrap_2_list('$8')}}.
refCursorTypeDefinition -> TYPE NAME IS REF CURSOR RETURN NAME                   '%TYPE'    ';' : #{type => "RefCursorType",
                                                                                                    refCursorTypeDefinition => #{name@ => unwrap_2_list('$2'),
                                                                                                    type@ => unwrap_2_list('$7'),
                                                                                                    attribute@ => unwrap_2_list('$8')}}.
refCursorTypeDefinition -> TYPE NAME IS REF CURSOR RETURN NAME '.' NAME          '%ROWTYPE' ';' : #{type => "RefCursorType",
                                                                                                    refCursorTypeDefinition => #{name@ => unwrap_2_list('$2'),
                                                                                                    type@ => lists:append([unwrap_2_list('$7'), ".", unwrap_2_list('$9')]),
                                                                                                    attribute@ => unwrap_2_list('$10')}}.
refCursorTypeDefinition -> TYPE NAME IS REF CURSOR RETURN NAME '.' NAME          '%TYPE'    ';' : #{type => "RefCursorType",
                                                                                                    refCursorTypeDefinition => #{name@ => unwrap_2_list('$2'),
                                                                                                    type@ => lists:append([unwrap_2_list('$7'), ".", unwrap_2_list('$9')]),
                                                                                                    attribute@ => unwrap_2_list('$10')}}.
refCursorTypeDefinition -> TYPE NAME IS REF CURSOR RETURN NAME '.' NAME '.' NAME '%TYPE'    ';' : #{type => "RefCursorType",
                                                                                                    refCursorTypeDefinition => #{name@ => unwrap_2_list('$2'),
                                                                                                    type@ => lists:append([unwrap_2_list('$7'), ".", unwrap_2_list('$9'), ".", unwrap_2_list('$11')]),
                                                                                                    attribute@ => unwrap_2_list('$12')}}.

subtypeDefinition -> SUBTYPE NAME IS dataType_1           ';' : #{type => "Subtype",
                                                                  subtypeDefinition => #{subtypeName@ => #{subtypeName => unwrap_2_list('$2')},
                                                                                         dataType@ => '$4'}}.
subtypeDefinition -> SUBTYPE NAME IS dataType_2           ';' : #{type => "Subtype",
                                                                  subtypeDefinition => #{subtypeName@ => #{subtypeName => unwrap_2_list('$2')},
                                                                                         dataType@ => '$4'}}.
subtypeDefinition -> SUBTYPE NAME IS dataType_1 NOT NULLX ';' : #{type => "Subtype",
                                                                  subtypeDefinition => #{subtypeName@ => #{subtypeName => unwrap_2_list('$2')},
                                                                                         dataType@ => '$4',
                                                                                         notNull@ => #{notNull => "not null"}}}.
subtypeDefinition -> SUBTYPE NAME IS dataType_2 NOT NULLX ';' : #{type => "Subtype",
                                                                  subtypeDefinition => #{subtypeName@ => #{subtypeName => unwrap_2_list('$2')},
                                                                                         dataType@ => '$4',
                                                                                         notNull@ => #{notNull => "not null"}}}.

variableDeclaration -> NAME dataType_1                   ';' : #{type => "Constant",
                                                                 variableDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                          dataType@ => '$3'}.
variableDeclaration -> NAME dataType_1           default ';' : #{type => "Constant",
                                                                 variableDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                          dataType@ => '$3',
                                                                                          default@ => '$4'}}.
variableDeclaration -> NAME dataType_1 NOT NULLX         ';' : #{type => "Constant",
                                                                 variableDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                          dataType@ => '$3',
                                                                                          notNull@ => #{notNull => "not null"}}.
variableDeclaration -> NAME dataType_1 NOT NULLX default ';' : #{type => "Constant",
                                                                 variableDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                          dataType@ => '$3',
                                                                                          notNull@ => #{notNull => "not null"},
                                                                                          default@ => '$6'}}.
variableDeclaration -> NAME dataType_2                   ';' : #{type => "Constant",
                                                                 variableDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                          dataType@ => '$3'}.
variableDeclaration -> NAME dataType_2           default ';' : #{type => "Constant",
                                                                 variableDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                          dataType@ => '$3',
                                                                                          default@ => '$4'}}.
variableDeclaration -> NAME dataType_2 NOT NULLX         ';' : #{type => "Constant",
                                                                 variableDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                          dataType@ => '$3',
                                                                                          notNull@ => #{notNull => "not null"}}.
variableDeclaration -> NAME dataType_2 NOT NULLX default ';' : #{type => "Constant",
                                                                 variableDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                          dataType@ => '$3',
                                                                                          notNull@ => #{notNull => "not null"},
                                                                                          default@ => '$6'}}.

============================================================================= */

collectionTypeDefinition ::= 'TYPE' NAME 'IS' ( assocArrayTypeDef | varrayTypeDef ) ';'

constantDeclaration ::= NAME 'CONSTANT' ( dataType_1 | dataType_2 ) ( 'NOT' 'NULL' )? default ';'

exceptionDeclaration ::= NAME 'EXCEPTION' ';'

functionAnnotation ::= privilegeRoleAnnotationList

functionHeading ::= 'FUNCTION' nameExtended ( '(' ( parameterAnnotation? parameterDeclaration )+ ')' )?
                               'RETURN' ( dataType_1 | dataType_2 )

procedureAnnotation ::= privilegeRoleAnnotationList

procedureHeading ::= 'PROCEDURE' NAME ( '(' ( parameterAnnotation? parameterDeclaration )+ ')' )?

recordTypeDefinition ::= 'TYPE' NAME 'IS' 'RECORD' '(' fieldDefinition ( ',' fieldDefinition )* ')' ';'

refCursorTypeDefinition ::= 'TYPE' NAME 'IS' 'REF' 'CURSOR' 'RETURN' ( NAME
                                                                 | ( ( NAME '.' )?  NAME ( '%ROWTYPE' | '%TYPE' )? )
                                                                 |   ( NAME '.' NAME '.' NAME '%TYPE'? ) )  ';'

subtypeDefinition ::= 'SUBTYPE' NAME 'IS'  ( dataType_1 | dataType_2 )  ( 'NOT' 'NULL' )? ';'

variableDeclaration ::= NAME ( dataType_1 | dataType_2 ) ( 'NOT' 'NULL' )? default? ';'

/* =============================================================================
accessor ->                   NAME : #{accessor => #{name@ => unwrap_2_list('$1')}}.
accessor ->          NAME '.' NAME : #{accessor => #{name@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')])}}.
accessor -> unitKind          NAME : #{accessor => #{unitKind@ => '$1',
                                                     name@ => unwrap_2_list('$2')}}.
accessor -> unitKind NAME '.' NAME : #{accessor => #{unitKind@ => '$1',
                                                     name@ => lists:append([unwrap_2_list('$2'), ".", unwrap_2_list('$4')])}}.

apiHiddenAnnotation -> '--<>' API_HIDDEN '=' TRUE : #{apiHiddenAnnotation => #{apiHidden@ => unwrap_2_list('$4'),
                                                                               type@ => unwrap_2_list('$2')}}.

assocArrayTypeDef -> TABLE OF dataType_1                               : #{assocArrayTypeDef => #{dataTypeTable@ => #{dataTypeTable => "table of", dataType@ => '$3'}}}.
assocArrayTypeDef -> TABLE OF dataType_1           INDEX BY dataType_2 : #{assocArrayTypeDef => #{dataTypeTable@ => #{dataTypeTable => "table of", dataType@ => '$3'},
                                                                                                  dataTypeIndex@ => #{dataTypeIndex => "index by", dataType@ => '$6'}}}.
assocArrayTypeDef -> TABLE OF dataType_1           INDEX BY dataType_3 : #{assocArrayTypeDef => #{dataTypeTable@ => #{dataTypeTable => "table of", dataType@ => '$3'},
                                                                                                  dataTypeIndex@ => #{dataTypeIndex => "index by", dataType@ => '$6'}}}.
assocArrayTypeDef -> TABLE OF dataType_1 NOT NULLX                     : #{assocArrayTypeDef => #{dataTypeTable@ => #{dataTypeTable => "table of", dataType@ => '$3'},
                                                                                                  notNull@ => #{notNull => "not null"}}}.
assocArrayTypeDef -> TABLE OF dataType_1 NOT NULLX INDEX BY dataType_2 : #{assocArrayTypeDef => #{dataTypeTable@ => #{dataTypeTable => "table of", dataType@ => '$3'},
                                                                                                  notNull@ => #{notNull => "not null"},
                                                                                                  dataTypeIndex@ => #{dataTypeIndex => "index by", dataType@ => '$8'}}}.
assocArrayTypeDef -> TABLE OF dataType_1 NOT NULLX INDEX BY dataType_3 : #{assocArrayTypeDef => #{dataTypeTable@ => #{dataTypeTable => "table of", dataType@ => '$3'},
                                                                                                  notNull@ => #{notNull => "not null"},
                                                                                                  dataTypeIndex@ => #{dataTypeIndex => "index by", dataType@ => '$8'}}}.
assocArrayTypeDef -> TABLE OF dataType_2                               : #{assocArrayTypeDef => #{dataTypeTable@ => #{dataTypeTable => "table of", dataType@ => '$3'}}}.
assocArrayTypeDef -> TABLE OF dataType_2           INDEX BY dataType_2 : #{assocArrayTypeDef => #{dataTypeTable@ => #{dataTypeTable => "table of", dataType@ => '$3'},
                                                                                                  dataTypeIndex@ => #{dataTypeIndex => "index by", dataType@ => '$6'}}}.
assocArrayTypeDef -> TABLE OF dataType_2           INDEX BY dataType_3 : #{assocArrayTypeDef => #{dataTypeTable@ => #{dataTypeTable => "table of", dataType@ => '$3'},
                                                                                                  dataTypeIndex@ => #{dataTypeIndex => "index by", dataType@ => '$6'}}}.
assocArrayTypeDef -> TABLE OF dataType_2 NOT NULLX                     : #{assocArrayTypeDef => #{dataTypeTable@ => #{dataTypeTable => "table of", dataType@ => '$3'},
                                                                                                  notNull@ => #{notNull => "not null"}}}.
assocArrayTypeDef -> TABLE OF dataType_2 NOT NULLX INDEX BY dataType_2 : #{assocArrayTypeDef => #{dataTypeTable@ => #{dataTypeTable => "table of", dataType@ => '$3'},
                                                                                                  notNull@ => #{notNull => "not null"},
                                                                                                  dataTypeIndex@ => #{dataTypeIndex => "index by", dataType@ => '$8'}}}.
assocArrayTypeDef -> TABLE OF dataType_2 NOT NULLX INDEX BY dataType_3 : #{assocArrayTypeDef => #{dataTypeTable@ => #{dataTypeTable => "table of", dataType@ => '$3'},
                                                                                                  notNull@ => #{notNull => "not null"},
                                                                                                  dataTypeIndex@ => #{dataTypeIndex => "index by", dataType@ => '$8'}}}.

dataType_1 -> BFILE                                                            : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_1 -> BINARY_DOUBLE                                                    : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_1 -> BINARY_FLOAT                                                     : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_1 -> BLOB                                                             : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_1 -> BOOLEAN                                                          : #{dataType => #{class@ => plsql,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_1 -> CHAR                                                             : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_1 -> CHAR          '(' INTNUM            ')'                          : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 size@ => unwrap_2_list('$3')}}.
dataType_1 -> CHAR          '(' INTNUM     BYTE   ')'                          : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 size@ => unwrap_2_list('$3'),
                                                                                                 sizeType@ => unwrap_2_list('$4')}}.
dataType_1 -> CHAR          '(' INTNUM     CHAR   ')'                          : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 size@ => unwrap_2_list('$3'),
                                                                                                 sizeType@ => unwrap_2_list('$4')}}.
dataType_1 -> CLOB                                                             : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_1 -> DATE                                                             : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_1 -> FLOAT                                                            : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_1 -> FLOAT         '(' INTNUM            ')'                          : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 precision@ => unwrap_2_list('$3')}}.
dataType_1 -> INTERVAL DAY                            TO SECOND                : #{dataType => #{class@ => sql,
                                                                                                 type@ => "INTERVAL DAY"}}.
dataType_1 -> INTERVAL DAY  '(' INTNUM            ')' TO SECOND                : #{dataType => #{class@ => sql,
                                                                                                 type@ => "INTERVAL DAY",
                                                                                                 dayPrecision@ => unwrap_2_list('$4')}}.
dataType_1 -> INTERVAL DAY                            TO SECOND '(' INTNUM ')' : #{dataType => #{class@ => sql,
                                                                                                 type@ => "INTERVAL DAY",
                                                                                                 secondPrecision@ => unwrap_2_list('$6')}}.
dataType_1 -> INTERVAL DAY  '(' INTNUM            ')' TO SECOND '(' INTNUM ')' : #{dataType => #{class@ => sql,
                                                                                                 type@ => "INTERVAL DAY",
                                                                                                 dayPrecision@ => unwrap_2_list('$4'),
                                                                                                 secondPrecision@ => unwrap_2_list('$9')}}.
dataType_1 -> INTERVAL YEAR                           TO MONTH                 : #{dataType => #{class@ => sql,
                                                                                                 type@ => "INTERVAL YEAR"}}.
dataType_1 -> INTERVAL YEAR '(' INTNUM            ')' TO MONTH                 : #{dataType => #{class@ => sql,
                                                                                                 type@ => "INTERVAL YEAR",
                                                                                                 precision@ => unwrap_2_list('$4')}}.
dataType_1 -> LONG RAW                                                         : #{dataType => #{class@ => sql,
                                                                                                 type@ => "LONG RAW"}}.
dataType_1 -> NAME                                                             : #{dataType => #{class@ => user_defined,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_1 -> NAME '.' NAME                                                    : #{dataType => #{class@ => user_defined,
                                                                                                 type@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')])}}.
dataType_1 -> NAME '.' NAME '.' NAME                                           : #{dataType => #{class@ => user_defined,
                                                                                                 type@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3'), ".", unwrap_2_list('$5')])}}.
dataType_1 -> NCHAR         '(' INTNUM            ')'                          : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 size@ => unwrap_2_list('$3')}}.
dataType_1 -> NCLOB                                                            : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_1 -> NUMBER                                                           : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_1 -> NUMBER        '(' INTNUM            ')'                          : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 precision@ => unwrap_2_list('$3')}}.
dataType_1 -> NUMBER        '(' INTNUM ',' INTNUM ')'                          : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 precision@ => unwrap_2_list('$3'),
                                                                                                 scale@ =>  unwrap_2_list('$5')}}.
dataType_1 -> NVARCHAR2     '(' INTNUM            ')'                          : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 size@ => unwrap_2_list('$3')}}.
dataType_1 -> RAW           '(' INTNUM            ')'                          : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 size@ => unwrap_2_list('$3')}}.
dataType_1 -> REF CURSOR                                                       : #{dataType => #{class@ => plsql,
                                                                                                 type@ => "REF CURSOR"}}.
dataType_1 -> ROWID                                                            : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_1 -> TIMESTAMP                                                        : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_1 -> TIMESTAMP                               WITH       TIME ZONE     : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 timeZone@ => true}}.
dataType_1 -> TIMESTAMP                               WITH LOCAL TIME ZONE     : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 timeZone@ => true,
                                                                                                 local@ => true}}.
dataType_1 -> TIMESTAMP     '(' INTNUM            ')'                          : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 precision@ => unwrap_2_list('$3')}}.
dataType_1 -> TIMESTAMP     '(' INTNUM            ')' WITH       TIME ZONE     : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 precision@ => unwrap_2_list('$3'),
                                                                                                 timeZone@ => true}}.
dataType_1 -> TIMESTAMP     '(' INTNUM            ')' WITH LOCAL TIME ZONE     : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 precision@ => unwrap_2_list('$3'),
                                                                                                 timeZone@ => true,
                                                                                                 local@ => true}}.
dataType_1 -> UROWID                                                           : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_1 -> UROWID        '(' INTNUM            ')'                          : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 size@ => unwrap_2_list('$3')}}.
dataType_1 -> VARCHAR2                                                         : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_1 -> VARCHAR2      '(' INTNUM BYTE       ')'                          : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 size@ => unwrap_2_list('$3'),
                                                                                                 sizeType@ => unwrap_2_list('$4')}}.
dataType_1 -> VARCHAR2      '(' INTNUM CHAR       ')'                          : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 size@ => unwrap_2_list('$3'),
                                                                                                 sizeType@ => unwrap_2_list('$4')}}.
dataType_1 -> XMLTYPE                                                          : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1')}}.

dataType_2 -> BINARY_INTEGER                                                   : #{dataType => #{class@ => plsql,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_2 -> NAME                   '%ROWTYPE'                                : #{dataType => #{class@ => user_defined,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 attribute@ => unwrap_2_list('$2')}}.
dataType_2 -> NAME                   '%TYPE'                                   : #{dataType => #{class@ => user_defined,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 attribute@ => unwrap_2_list('$2')}}.
dataType_2 -> NAME '.' NAME          '%ROWTYPE'                                : #{dataType => #{class@ => user_defined,
                                                                                                 type@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
                                                                                                 attribute@ => unwrap_2_list('$4')}}.
dataType_2 -> NAME '.' NAME          '%TYPE'                                   : #{dataType => #{class@ => user_defined,
                                                                                                 type@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
                                                                                                 attribute@ => unwrap_2_list('$4')}}.
dataType_2 -> NAME '.' NAME '.' NAME '%TYPE'                                   : #{dataType => #{class@ => user_defined,
                                                                                                 type@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3'), ".", unwrap_2_list('$5')]),
                                                                                                 attribute@ => unwrap_2_list('$6')}}.
dataType_2 -> PLS_INTEGER                                                      : #{dataType => #{class@ => plsql,
                                                                                                 type@ => unwrap_2_list('$1')}}.
dataType_2 -> VARCHAR2      '(' INTNUM            ')'                          : #{dataType => #{class@ => sql,
                                                                                                 type@ => unwrap_2_list('$1'),
                                                                                                 size@ => unwrap_2_list('$3')}}.

dataType_3 -> LONG                                                             : #{dataType => #{class@ => sql,
                                                                                                 type@ => "LONG"}}.

fieldDefinition -> nameExtended dataType_1                   : #{fieldDefinition => #{name@ => '$1',
                                                                                      dataType@ => '$2'}}.
fieldDefinition -> nameExtended dataType_2                   : #{fieldDefinition => #{name@ => '$1',
                                                                                      dataType@ => '$2'}}.
fieldDefinition -> nameExtended dataType_1           default : #{fieldDefinition => #{name@ => '$1',
                                                                                      dataType@ => '$2',
                                                                                      default@ => '$3'}}.
fieldDefinition -> nameExtended dataType_2           default : #{fieldDefinition => #{name@ => '$1',
                                                                                      dataType@ => '$2',
                                                                                      default@ => '$3'}}.
fieldDefinition -> nameExtended dataType_1 NOT NULLX default : #{fieldDefinition => #{name@ => '$1',
                                                                                      dataType@ => '$2',
                                                                                      notNull@ => #{notNull => "not null"},
                                                                                      default@ => '$5'}}.
fieldDefinition -> nameExtended dataType_2 NOT NULLX default : #{fieldDefinition => #{name@ => '$1',
                                                                                      dataType@ => '$2',
                                                                                      notNull@ => #{notNull => "not null"},
                                                                                      default@ => '$5'}}.

packageFunctionDeclarationAttribute -> accessibleByClause    : #{packageFunctionDeclarationAttribute => '$1'}.
packageFunctionDeclarationAttribute -> DETERMINISTIC         : #{packageFunctionDeclarationAttribute => unwrap_2_list('$1')}.
packageFunctionDeclarationAttribute -> parallelEnabledClause : #{packageFunctionDeclarationAttribute => '$1'}.
packageFunctionDeclarationAttribute -> pipelinedClause       : #{packageFunctionDeclarationAttribute => '$1'}.
packageFunctionDeclarationAttribute -> resultCacheClause     : #{packageFunctionDeclarationAttribute => '$1'}.

parameterDeclarationCommaList -> parameterDeclaration                                   : ['$1'].
parameterDeclarationCommaList -> parameterDeclaration ',' parameterDeclarationCommaList : ['$1' | '$3'].

varrayTypeDef -> ARRAY         '(' INTNUM ')' OF dataType_1           : #{varrayTypeDef => #{type@ => #{varrayType => "array"},
                                                                                             size@ => #{varraySize => unwrap_2_list('$3')},
                                                                                             dataType@ => '$6'}}.
varrayTypeDef -> ARRAY         '(' INTNUM ')' OF dataType_2           : #{varrayTypeDef => #{type@ => #{varrayType => "array"},
                                                                                             size@ => #{varraySize => unwrap_2_list('$3')},
                                                                                             dataType@ => '$6'}}.
varrayTypeDef -> ARRAY         '(' INTNUM ')' OF dataType_1 NOT NULLX : #{varrayTypeDef => #{type@ => #{varrayType => "array"},
                                                                                             size@ => #{varraySize => unwrap_2_list('$3')},
                                                                                             dataType@ => '$6',
                                                                                             notNull@ => #{notNull => "not null"}}}.
varrayTypeDef -> ARRAY         '(' INTNUM ')' OF dataType_2 NOT NULLX : #{varrayTypeDef => #{type@ => #{varrayType => "array"},
                                                                                             size@ => #{varraySize => unwrap_2_list('$3')},
                                                                                             dataType@ => '$6',
                                                                                             notNull@ => #{notNull => "not null"}}}.
varrayTypeDef -> VARRAY        '(' INTNUM ')' OF dataType_1           : #{varrayTypeDef => #{type@ => #{varrayType => "varray"},
                                                                                             size@ => #{varraySize => unwrap_2_list('$3')},
                                                                                             dataType@ => '$6'}}.
varrayTypeDef -> VARRAY        '(' INTNUM ')' OF dataType_2           : #{varrayTypeDef => #{type@ => #{varrayType => "varray"},
                                                                                             size@ => #{varraySize => unwrap_2_list('$3')},
                                                                                             dataType@ => '$6'}}.
varrayTypeDef -> VARRAY        '(' INTNUM ')' OF dataType_1 NOT NULLX : #{varrayTypeDef => #{type@ => #{varrayType => "varray"},
                                                                                             size@ => #{varraySize => unwrap_2_list('$3')},
                                                                                             dataType@ => '$6',
                                                                                             notNull@ => #{notNull => "not null"}}}.
varrayTypeDef -> VARRAY        '(' INTNUM ')' OF dataType_2 NOT NULLX : #{varrayTypeDef => #{type@ => #{varrayType => "varray"},
                                                                                             size@ => #{varraySize => unwrap_2_list('$3')},
                                                                                             dataType@ => '$6',
                                                                                             notNull@ => #{notNull => "not null"}}}.
varrayTypeDef -> VARYING ARRAY '(' INTNUM ')' OF dataType_1           : #{varrayTypeDef => #{type@ => #{varrayType => "varying array"},
                                                                                             size@ => #{varraySize => unwrap_2_list('$4')},
                                                                                             dataType@ => '$7'}}.
varrayTypeDef -> VARYING ARRAY '(' INTNUM ')' OF dataType_2           : #{varrayTypeDef => #{type@ => #{varrayType => "varying array"},
                                                                                             size@ => #{varraySize => unwrap_2_list('$4')},
                                                                                             dataType@ => '$7'}}.
varrayTypeDef -> VARYING ARRAY '(' INTNUM ')' OF dataType_1 NOT NULLX : #{varrayTypeDef => #{type@ => #{varrayType => "varying array"},
                                                                                             size@ => #{varraySize => unwrap_2_list('$4')},
                                                                                             dataType@ => '$7',
                                                                                             notNull@ => #{notNull => "not null"}}}.
varrayTypeDef -> VARYING ARRAY '(' INTNUM ')' OF dataType_2 NOT NULLX : #{varrayTypeDef => #{type@ => #{varrayType => "varying array"},
                                                                                             size@ => #{varraySize => unwrap_2_list('$4')},
                                                                                             dataType@ => '$7',
                                                                                             notNull@ => #{notNull => "not null"}}}.
============================================================================= */

accessor ::= unitKind? ( NAME '.' )?  NAME

apiHiddenAnnotation ::= '--<>' 'API_HIDDEN' '=' 'TRUE'

assocArrayTypeDef ::= 'TABLE' 'OF' ( dataType_1 | dataType_2 ) ( NOT NULL )? ( 'INDEX' 'BY' ( dataType_2 | dataType_3 ) )?

dataType_1 ::= 'BFILE'
             | 'BINARY_DOUBLE'
             | 'BINARY_FLOAT'
             | 'BLOB'
             | 'BOOLEAN'
             | ( ( 'CHAR' | 'VARCHAR2' ) ( '(' INTNUM ( 'BYTE' | 'CHAR' )? ')' )? )
             | 'CLOB'
             | 'DATE'
             | ( ( 'FLOAT' | 'UROWID' ) ( '(' INTNUM ')' )? )
             | ( 'INTERVAL' 'DAY' ( '(' INTNUM ')' )? 'TO' 'SECOND' ( '(' INTNUM ')' )? )
             | ( 'INTERVAL' 'YEAR' ( '(' INTNUM ')' )? 'TO' 'MONTH' )
             | ( 'LONG' 'RAW' )
             | ( ( ( NAME '.' )?  NAME '.' )? NAME )
             | ( ( 'NCHAR' | 'NVARCHAR2' | 'RAW' ) '(' INTNUM ')' )
             | 'NCLOB'
             | ( 'NUMBER' ( '(' INTNUM ( ',' INTNUM )? ')' )? )
             | ( 'REF' 'CURSOR' )
             | 'ROWID'
             | ( 'TIMESTAMP' ( '(' INTNUM ')' )? ( 'WITH' 'LOCAL'? 'TIME' 'ZONE' )? )
             | ( 'VARCHAR2' ( '(' INTNUM ( 'BYTE' | 'CHAR' ) ')' )? )
             | 'XMLTYPE'
  
dataType_2 ::= 'BINARY_INTEGER'
             | ( ( NAME '.' )?  NAME ( '%ROWTYPE' | '%TYPE' )? )
             | ( NAME '.' NAME '.' NAME '%TYPE'? )
             | 'PLS_INTEGER'
             | ( 'VARCHAR2' '(' INTNUM ')' )

dataType_3 ::= 'LONG'

fieldDefinition ::= nameExtended ( dataType_1 | dataType_2 ) ( ( 'NOT' 'NULL' )? default )?

packageFunctionDeclarationAttribute ::= accessibleByClause
                                      | 'DETERMINISTIC'
                                      | parallelEnabledClause
                                      | pipelinedClause
                                      | resultCacheClause

varrayTypeDef ::= ( ( 'VARYING'? 'ARRAY' ) | 'VARRAY' ) '(' INTNUM ')' 'OF' ( dataType_1 | dataType_2 ) ( 'NOT' 'NULL' )?

/* =============================================================================
nameExtended -> API_GROUP : "api_group".
nameExtended -> FALSE     : "false".
nameExtended -> NAME      : unwrap_2_list('$1').
nameExtended -> NONE      : "none".
nameExtended -> TRUE      : "true".

parameterDeclaration -> NAME               dataType_1         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                            dataType@ => '$2'}}.
parameterDeclaration -> NAME               dataType_1 default : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                            dataType@ => '$2',
                                                                                            default@ => '$3'}}.
parameterDeclaration -> NAME               dataType_2         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                            dataType@ => '$2'}}.
parameterDeclaration -> NAME               dataType_2 default : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                            dataType@ => '$2',
                                                                                            default@ => '$3'}}.
parameterDeclaration -> NAME IN            dataType_1         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                            mode@ => unwrap_2_list('$2'),
                                                                                            dataType@ => '$3'}}.
parameterDeclaration -> NAME IN            dataType_1 default : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                            mode@ => unwrap_2_list('$2'),
                                                                                            dataType@ => '$3',
                                                                                            default@ => '$4'}}.
parameterDeclaration -> NAME IN            dataType_2         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                            mode@ => unwrap_2_list('$2'),
                                                                                            dataType@ => '$3'}}.
parameterDeclaration -> NAME IN            dataType_2 default : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                            mode@ => unwrap_2_list('$2'),
                                                                                            dataType@ => '$3',
                                                                                            default@ => '$4'}}.
parameterDeclaration -> NAME    OUT        dataType_1         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                            mode@ => unwrap_2_list('$2'),
                                                                                            dataType@ => '$3'}}.
parameterDeclaration -> NAME    OUT        dataType_2         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                            mode@ => unwrap_2_list('$2'),
                                                                                            dataType@ => '$3'}}.
parameterDeclaration -> NAME    OUT NOCOPY dataType_1         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                            mode@ => unwrap_2_list('$2'),
                                                                                            nocopy@ => unwrap_2_list('$3'),
                                                                                            dataType@ => '$4'}}.
parameterDeclaration -> NAME    OUT NOCOPY dataType_2         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                            mode@ => unwrap_2_list('$2'),
                                                                                            nocopy@ => unwrap_2_list('$3'),
                                                                                            dataType@ => '$4'}}.
parameterDeclaration -> NAME IN OUT        dataType_1         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                            mode@ => "IN OUT",
                                                                                            dataType@ => '$4'}}.
parameterDeclaration -> NAME IN OUT        dataType_2         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                            mode@ => "IN OUT",
                                                                                            dataType@ => '$4'}}.
parameterDeclaration -> NAME IN OUT NOCOPY dataType_1         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                            mode@ => "IN OUT",
                                                                                            nocopy@ => unwrap_2_list('$4'),
                                                                                            dataType@ => '$5'}}.
parameterDeclaration -> NAME IN OUT NOCOPY dataType_2         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
                                                                                            mode@ => "IN OUT",
                                                                                            nocopy@ => unwrap_2_list('$4'),
                                                                                            dataType@ => '$5'}}.

unitKind -> FUNCTION  : unwrap_2_list('$1').
unitKind -> PACKAGE   : unwrap_2_list('$1').
unitKind -> PROCEDURE : unwrap_2_list('$1').
unitKind -> TRIGGER   : unwrap_2_list('$1').
unitKind -> TYPE      : unwrap_2_list('$1').
============================================================================= */

nameExtended ::= 'API_GROUP' | 'FALSE' | NAME | 'NONE' | 'TRUE'

parameterDeclaration ::= NAME ( 'IN'? ( dataType_1 | dataType_2 ) default? )
                            | ( 'IN'? 'OUT' 'NOCOPY'? ( dataType_1 | dataType_2 ) )

unitKind ::= 'FUNCTION'
           | 'PROCEDURE'
           | 'PACKAGE'
           | 'TRIGGER'
           | 'TYPE'

/* =============================================================================
default -> ':='    expression : #{default => #{type@ => unwrap_2_list('$1'),
                                               value@ => '$2'}}.
default -> DEFAULT expression : #{default => #{type@ => unwrap_2_list('$1'),
                                               value@ => '$2'}}.

expression -> columnRef                        : #{expression => '$1'}.
expression -> functionRef                      : #{expression => '$1'}.
expression -> literal                          : #{expression => '$1'}.
expression -> NULLX                            : #{expression => "NULL"}.
expression -> parameterRef                     : #{expression => '$1'}.
expression -> '(' expression ')'               : #{expression => #{operator@ => '(',
                                                                   expression@ => '$2'}}.
expression -> 'NOT'                 expression : #{expression => #{operator@ => 'NOT',
                                                                   expression@ => '$2'}}.
expression -> unaryAddOrSubtract    expression : #{expression => #{operator@ => '$1',
                                                                   expression@ => '$2'}}.
expression -> expression 'AND'      expression : #{expression => #{operator@ => 'AND',
                                                                   expressionLeft@ => '$1',
                                                                   expressionRight@ => '$3'}}.
expression -> expression 'OR'       expression : #{expression => #{operator@ => 'OR',
                                                                   expressionLeft@ => '$1',
                                                                   expressionRight@ => '$3'}}.
expression -> expression '+'        expression : #{expression => #{operator@ => '+',
                                                                   expressionLeft@ => '$1',
                                                                   expressionRight@ => '$3'}}.
expression -> expression '-'        expression : #{expression => #{operator@ => '-',
                                                                   expressionLeft@ => '$1',
                                                                   expressionRight@ => '$3'}}.
expression -> expression '/'        expression : #{expression => #{operator@ => '/',
                                                                   expressionLeft@ => '$1',
                                                                   expressionRight@ => '$3'}}.
expression -> expression '*'        expression : #{expression => #{operator@ => '*',
                                                                   expressionLeft@ => '$1',
                                                                   expressionRight@ => '$3'}}.
expression -> expression '||'       expression : #{expression => #{operator@ => '||',
                                                                   expressionLeft@ => '$1',
                                                                   expressionRight@ => '$3'}}.
expression -> expression '='        expression : #{expression => #{operator@ => '=',
                                                                   expressionLeft@ => '$1',
                                                                   expressionRight@ => '$3'}}.
expression -> expression COMPARISON expression : #{expression => #{operator@ => unwrap_2_atom('$2'),
                                                                   expressionLeft@ => '$1',
                                                                   expressionRight@ => '$3'}}.

parallelEnabledClause -> PARALLEL_ENABLED '(' PARTITION NAME BY ANY                                              ')' : #{parallelEnabledClause => #{name@ => unwrap_2_list('$4'),
                                                                                                                                                    type@ => unwrap_2_list('$6')}}.
parallelEnabledClause -> PARALLEL_ENABLED '(' PARTITION NAME BY HASH  '(' columnRefCommaList ')'                 ')' : #{parallelEnabledClause => #{name@ => unwrap_2_list('$4'),
                                                                                                                                                    type@ => unwrap_2_list('$6'),
                                                                                                                                                    columnRefCommaList@ => '$8'}}.
parallelEnabledClause -> PARALLEL_ENABLED '(' PARTITION NAME BY HASH  '(' columnRefCommaList ')' streamingClause ')' : #{parallelEnabledClause => #{name@ => unwrap_2_list('$4'),
                                                                                                                                                    type@ => unwrap_2_list('$6'),
                                                                                                                                                    columnRefCommaList@ => '$8',
                                                                                                                                                    streamingClause@ => '$10'}}.
parallelEnabledClause -> PARALLEL_ENABLED '(' PARTITION NAME BY RANGE '(' columnRefCommaList ')'                 ')' : #{parallelEnabledClause => #{name@ => unwrap_2_list('$4'),
                                                                                                                                                    type@ => unwrap_2_list('$6'),
                                                                                                                                                    columnRefCommaList@ => '$8'}}.
parallelEnabledClause -> PARALLEL_ENABLED '(' PARTITION NAME BY RANGE '(' columnRefCommaList ')' streamingClause ')' : #{parallelEnabledClause => #{name@ => unwrap_2_list('$4'),
                                                                                                                                                    type@ => unwrap_2_list('$6'),
                                                                                                                                                    columnRefCommaList@ => '$8',
                                                                                                                                                    streamingClause@ => '$10'}}.
parallelEnabledClause -> PARALLEL_ENABLED '(' PARTITION NAME BY VALUE '(' columnRef          ')'                 ')' : #{parallelEnabledClause => #{name@ => unwrap_2_list('$4'),
                                                                                                                                                    type@ => unwrap_2_list('$6'),
                                                                                                                                                    columnRefCommaList@ => ['$8']}}.

pipelinedClause -> PIPELINED                   USING          NAME : #{pipelinedClause => #{implementationPackage@ => unwrap_2_list('$3')}}.
pipelinedClause -> PIPELINED                   USING NAME '.' NAME : #{pipelinedClause => #{implementationPackage@ => lists:append([unwrap_2_list('$3'), ".", unwrap_2_list('$5')])}}.
pipelinedClause -> PIPELINED ROW   POLYMORPHIC USING          NAME : #{pipelinedClause => #{type@ => unwrap_2_list('$2'),
                                                                                            implementationPackage@ => unwrap_2_list('$5')}}.
pipelinedClause -> PIPELINED ROW   POLYMORPHIC USING NAME '.' NAME : #{pipelinedClause => #{type@ => unwrap_2_list('$2'),
                                                                                            implementationPackage@ => lists:append([unwrap_2_list('$5'), ".", unwrap_2_list('$7')])}}.
pipelinedClause -> PIPELINED TABLE POLYMORPHIC USING          NAME : #{pipelinedClause => #{type@ => unwrap_2_list('$2'),
                                                                                            implementationPackage@ => unwrap_2_list('$5')}}.
pipelinedClause -> PIPELINED TABLE POLYMORPHIC USING NAME '.' NAME : #{pipelinedClause => #{type@ => unwrap_2_list('$2'),
                                                                                            implementationPackage@ => lists:append([unwrap_2_list('$5'), ".", unwrap_2_list('$7')])}}.

resultCacheClause -> RESULT_CACHE                                       : #{resultCacheClause => #{dataSourceCommaList@ => {}}}.
resultCacheClause -> RESULT_CACHE RELIES_ON '(' dataSourceCommaList ')' : #{resultCacheClause => #{dataSourceCommaList@ => '$4'}}.
============================================================================= */

default ::= ( ':=' | 'DEFAULT' ) expression

expression ::= columnRef
             | functionRef
             | literal
             | NULLX
             | parameterRef
             | ( '(' expression ')' )
             | ( 'NOT' expression )
             | ( unaryAddOrSubtract expression )
             | ( expression (  'AND' | 'OR' | '+' | '-' | '/' | '*' | '||' | '=' | COMPARISON ) expression )

parallelEnabledClause ::=  'PARALLEL_ENABLED' '(' 'PARTITION' NAME 'BY'
                                                'ANY'
                                              | ( ( 'HASH' | 'RANGE' ) '(' columnRef ( ',' columnRef )* ')' streamingClause? )
                                              | ( 'VALUE' '(' columnRef ')' ) 
                                              ')'

pipelinedClause ::= 'PIPELINED' ( ( 'ROW' | 'TABLE' ) 'POLYMORPHIC' )? 'USING' ( NAME '.' )? NAME

resultCacheClause ::= 'RESULT_CACHE' ( 'RELIES_ON' '(' dataSource ( ',' dataSource )* ')' )?

/* =============================================================================
columnRef -> NAME                               : #{columnRef => unwrap_2_list('$1')}.
columnRef -> NAME '.' NAME                      : #{columnRef => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')])}.
columnRef -> NAME '.' NAME '.' NAME             : #{columnRef => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3'), ".", unwrap_2_list('$5')])}.
columnRef -> NAME '(' '+' ')'                   : #{columnRef => lists:append([unwrap_2_list('$1'), "(+)"])}.
columnRef -> NAME '.' NAME '(' '+' ')'          : #{columnRef => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3'), "(+)"])}.
columnRef -> NAME '.' NAME '.' NAME '(' '+' ')' : #{columnRef => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3'), ".", unwrap_2_list('$5'),"(+)"])}.
columnRef -> NAME '.' '*'                       : #{columnRef => lists:append([unwrap_2_list('$1'), ".*"])}.
columnRef -> NAME '.' NAME '.' '*'              : #{columnRef => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3'), ".*"])}.

dataSourceCommaList -> dataSource                         : ['$1'].
dataSourceCommaList -> dataSource ',' dataSourceCommaList : ['$1' | '$3'].

streamingClause -> ORDER   expression BY '(' columnRefCommaList ')' : #{streamingClause => #{type@ => unwrap_2_list('$1'),
                                                                                             expression@ => '$2',
                                                                                             columnRefCommaList@ => '$5'}}.
streamingClause -> CLUSTER expression BY '(' columnRefCommaList ')' : #{streamingClause => #{type@ => unwrap_2_list('$1'),
                                                                                             expression@ => '$2',
                                                                                             columnRefCommaList@ => '$5'}}.
============================================================================= */

columnRef ::= ( ( ( NAME '.' )? NAME '.' )? NAME ( '(' '+' ')' )? )
            | ( ( NAME '.' )? NAME '.' '*' )

streamingClause ::= ( 'ORDER' | 'CLUSTER' ) expression 'BY'
                                           '(' columnRef ( ',' columnRef )* ')'

/* =============================================================================
columnRefCommaList -> columnRef                        : ['$1'].
columnRefCommaList -> columnRef ',' columnRefCommaList : ['$1' | '$3'].

dataSource ->          NAME : #{dataSource => unwrap_2_list('$1')}.
dataSource -> NAME '.' NAME : #{dataSource => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')])}.
============================================================================= */

dataSource ::=  ( NAME '.' )? NAME

/* =============================================================================
functionRef -> NAME                   '('                      ')' : #{functionRef => #{name@ => unwrap_2_list('$1'),
                                                                                        functionArgCommaList@ => '()'}}.
functionRef -> NAME                   '(' functionArgCommaList ')' : #{functionRef => #{name@ => unwrap_2_list('$1'),
                                                                                        functionArgCommaList@ => make_list('$3')}}.
functionRef -> NAME '.' NAME          '('                      ')' : #{functionRef => #{name@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
                                                                                        functionArgCommaList@ => '()'}}.
functionRef -> NAME '.' NAME          '(' functionArgCommaList ')' : #{functionRef => #{name@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
                                                                                        functionArgCommaList@ => make_list('$5')}}.
functionRef -> NAME '.' NAME '.' NAME '('                      ')' : #{functionRef => #{name@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3'), ".", unwrap_2_list('$5')]),
                                                                                        functionArgCommaList@ => '()'}}.
functionRef -> NAME '.' NAME '.' NAME '(' functionArgCommaList ')' : #{functionRef => #{name@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3'), ".", unwrap_2_list('$5')]),
                                                                                        functionArgCommaList@ => make_list('$7')}}.

literal -> APPROXNUM : #{literal => unwrap_2_list('$1')}.
literal -> FALSE     : #{literal => unwrap_2_list('$1')}.
literal -> INTNUM    : #{literal => unwrap_2_list('$1')}.
literal -> STRING    : #{literal => unwrap_2_list('$1')}.
literal -> TRUE      : #{literal => unwrap_2_list('$1')}.

parameterRef -> PARAMETER                     : #{parameterRef => unwrap_2_list('$1')}.
parameterRef -> PARAMETER           PARAMETER : #{parameterRef => #{parameterLeft@ => unwrap_2_list('$1'),
                                                                    parameterRight@ => unwrap_2_list('$2')}}.
parameterRef -> PARAMETER INDICATOR PARAMETER : #{parameterRef => #{indicator@ => true,
                                                                    parameterLeft@ => unwrap_2_list('$1'),
                                                                    parameterRight@ => unwrap_2_list('$3')}}.

unaryAddOrSubtract -> '+' : #{unaryAddOrSubtract => unwrap_2_list('$1')}.
unaryAddOrSubtract -> '-' : #{unaryAddOrSubtract => unwrap_2_list('$1')}.
============================================================================= */

functionRef ::= ( ( NAME '.' )? NAME '.' )? NAME ( '(' functionArg* ')' )?

literal ::= APPROXNUM
          | 'FALSE'
          | INTNUM
          | STRING
          | 'TRUE'

parameterRef ::= PARAMETER ( 'INDICATOR'? PARAMETER )?

unaryAddOrSubtract ::= '+'
                     | '-'

/* =============================================================================
functionArg -> expression            : #{functionArg => '$1'}.
functionArg -> NAME '=>' expression  : #{functionArg => #{name@ => '$1',
                                                          expression@ => '$3'}}.
============================================================================= */

functionArg ::= expression
              | ( NAME '=>' expression )

/* =============================================================================
(!=|\^=|<>|<|>|<=|>=) : {token, {'COMPARISON', TokenLine, list_to_atom(TokenChars)}}.
============================================================================= */

COMPARISON ::= '!='
              | '^='
              | '<>'
              | '<'
              | '>'
              | '<='
              | '>='

/* ========================================================================== */
