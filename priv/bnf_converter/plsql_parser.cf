-- -----------------------------------------------------------------------------
--
-- plsql_parser.cf: PL/SQL - grammar definition in BNF Converter format.
--
-- Copyright (c) 2018-18 K2 Informatics GmbH.  All Rights Reserved.
--
-- This file is provided to you under the Apache License,
-- Version 2.0 (the "License"); you may not use this file
-- except in compliance with the License.  You may obtain
-- a copy of the License at
--
--   http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing,
-- software distributed under the License is distributed on an
-- "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-- KIND, either express or implied.  See the License for the
-- specific language governing permissions and limitations
-- under the License.
--
-- -----------------------------------------------------------------------------

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- Grammar rules.
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- Level 01 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- plsqlScript -> plsqlUnit             : ['$1'].
-- plsqlScript -> plsqlUnit plsqlScript : [['$1'] | '$2'].

PlsqlScript01.                              PlsqlScript ::= PlsqlUnit             ;
PlsqlScript02.                              PlsqlScript ::= PlsqlUnit PlsqlScript ;

-- Level 02 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- plsqlUnit -> createPackage : #{plsqlUnit => #{createPackage@ => '$1'}}.

PlsqlUnit01.                                PlsqlUnit ::= CreatePackage ;

-- Level 03 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- createPackage -> CREATE                           PACKAGE plsqlPackageSource ';'     : #{createPackage => #{plsqlPackageSource@ => '$3'}}.
-- createPackage -> CREATE                           PACKAGE plsqlPackageSource ';' '/' : #{createPackage => #{plsqlPackageSource@ => '$3',
--                                                                                                                slash@ => true}}.
-- createPackage -> CREATE               EDITIONABLE PACKAGE plsqlPackageSource ';'     : #{createPackage => #{editionable@ => unwrap_2_list('$2'),
--                                                                                                                plsqlPackageSource@ => '$4'}}.
-- createPackage -> CREATE               EDITIONABLE PACKAGE plsqlPackageSource ';' '/' : #{createPackage => #{editionable@ => unwrap_2_list('$2'),
--                                                                                                                plsqlPackageSource@ => '$4',
--                                                                                                                slash@ => true}}.
-- createPackage -> CREATE            NONEDITIONABLE PACKAGE plsqlPackageSource ';'     : #{createPackage => #{editionable@ => unwrap_2_list('$2'),
--                                                                                                                plsqlPackageSource@ => '$4'}}.
-- createPackage -> CREATE            NONEDITIONABLE PACKAGE plsqlPackageSource ';' '/' : #{createPackage => #{editionable@ => unwrap_2_list('$2'),
--                                                                                                                plsqlPackageSource@ => '$4',
--                                                                                                                slash@ => true}}.
-- createPackage -> CREATE OR REPLACE                PACKAGE plsqlPackageSource ';'     : #{createPackage => #{orReplace@ => "OR REPLACE",
--                                                                                                                plsqlPackageSource@ => '$5'}}.
-- createPackage -> CREATE OR REPLACE                PACKAGE plsqlPackageSource ';' '/' : #{createPackage => #{orReplace@ => "OR REPLACE",
--                                                                                                                plsqlPackageSource@ => '$5',
--                                                                                                                slash@ => true}}.
-- createPackage -> CREATE OR REPLACE    EDITIONABLE PACKAGE plsqlPackageSource ';'     : #{createPackage => #{orReplace@ => "OR REPLACE",
--                                                                                                                editionable@ => unwrap_2_list('$4'),
--                                                                                                                plsqlPackageSource@ => '$6'}}.
-- createPackage -> CREATE OR REPLACE    EDITIONABLE PACKAGE plsqlPackageSource ';' '/' : #{createPackage => #{orReplace@ => "OR REPLACE",
--                                                                                                                editionable@ => unwrap_2_list('$4'),
--                                                                                                                plsqlPackageSource@ => '$6',
--                                                                                                                slash@ => true}}.
-- createPackage -> CREATE OR REPLACE NONEDITIONABLE PACKAGE plsqlPackageSource ';'     : #{createPackage => #{orReplace@ => "OR REPLACE",
--                                                                                                                editionable@ => unwrap_2_list('$4'),
--                                                                                                                plsqlPackageSource@ => '$6'}}.
-- createPackage -> CREATE OR REPLACE NONEDITIONABLE PACKAGE plsqlPackageSource ';' '/' : #{createPackage => #{orReplace@ => "OR REPLACE",
--                                                                                                                editionable@ => unwrap_2_list('$4'),
--                                                                                                                plsqlPackageSource@ => '$6',
--                                                                                                                slash@ => true}}.

CreatePackage01.                            CreatePackage ::= "CREATE"                                 "PACKAGE" PlsqlPackageSource ";"     ;
CreatePackage02.                            CreatePackage ::= "CREATE"                                 "PACKAGE" PlsqlPackageSource ";" "/" ;
CreatePackage03.                            CreatePackage ::= "CREATE"                   "EDITIONABLE" "PACKAGE" PlsqlPackageSource ";"     ;
CreatePackage04.                            CreatePackage ::= "CREATE"                   "EDITIONABLE" "PACKAGE" PlsqlPackageSource ";" "/" ;
CreatePackage05.                            CreatePackage ::= "CREATE"                "NONEDITIONABLE" "PACKAGE" PlsqlPackageSource ";"     ;
CreatePackage06.                            CreatePackage ::= "CREATE"                "NONEDITIONABLE" "PACKAGE" PlsqlPackageSource ";" "/" ;
CreatePackage07.                            CreatePackage ::= "CREATE" "OR" "REPLACE"                  "PACKAGE" PlsqlPackageSource ";"     ;
CreatePackage08.                            CreatePackage ::= "CREATE" "OR" "REPLACE"                  "PACKAGE" PlsqlPackageSource ";" "/" ;
CreatePackage09.                            CreatePackage ::= "CREATE" "OR" "REPLACE"    "EDITIONABLE" "PACKAGE" PlsqlPackageSource ";"     ;
CreatePackage10.                            CreatePackage ::= "CREATE" "OR" "REPLACE"    "EDITIONABLE" "PACKAGE" PlsqlPackageSource ";" "/" ;
CreatePackage11.                            CreatePackage ::= "CREATE" "OR" "REPLACE" "NONEDITIONABLE" "PACKAGE" PlsqlPackageSource ";"     ;
CreatePackage12.                            CreatePackage ::= "CREATE" "OR" "REPLACE" "NONEDITIONABLE" "PACKAGE" PlsqlPackageSource ";" "/" ;

-- Level 04 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- plsqlPackageSource ->          "NAME"                                               AS packageItemList END      : #{plsqlPackageSource => #{packageNameStart@ => unwrap_2_list('$1'),
--                                                                                                                                           asIs@ => unwrap_2_list('$2'),
--                                                                                                                                           packageItemList@ => '$3'}}.
-- plsqlPackageSource ->          "NAME"                                               IS packageItemList END      : #{plsqlPackageSource => #{packageNameStart@ => unwrap_2_list('$1'),
--                                                                                                                                           asIs@ => unwrap_2_list('$2'),
--                                                                                                                                           packageItemList@ => '$3'}}.
-- plsqlPackageSource ->          "NAME"                                               AS packageItemList END "NAME" : #{plsqlPackageSource => #{packageNameStart@ => unwrap_2_list('$1'),
--                                                                                                                                           asIs@ => unwrap_2_list('$2'),
--                                                                                                                                           packageItemList@ => '$3',
--                                                                                                                                           packageNameEnd@ => unwrap_2_list('$5')}}.
-- plsqlPackageSource ->          "NAME"                                               IS packageItemList END "NAME" : #{plsqlPackageSource => #{packageNameStart@ => unwrap_2_list('$1'),
--                                                                                                                                           asIs@ => unwrap_2_list('$2'),
--                                                                                                                                           packageItemList@ => '$3',
--                                                                                                                                           packageNameEnd@ => unwrap_2_list('$5')}}.
-- plsqlPackageSource ->          "NAME"               plsqlPackageSourceAttributeList AS packageItemList END      : #{plsqlPackageSource => #{packageNameStart@ => unwrap_2_list('$1'),
--                                                                                                                                           plsqlPackageSourceAttributeList@ => '$2',
--                                                                                                                                           asIs@ => unwrap_2_list('$3'),
--                                                                                                                                           packageItemList@ => '$4'}}.
-- plsqlPackageSource ->          "NAME"               plsqlPackageSourceAttributeList IS packageItemList END      : #{plsqlPackageSource => #{packageNameStart@ => unwrap_2_list('$1'),
--                                                                                                                                           plsqlPackageSourceAttributeList@ => '$2',
--                                                                                                                                           asIs@ => unwrap_2_list('$3'),
--                                                                                                                                           packageItemList@ => '$4'}}.
-- plsqlPackageSource ->          "NAME"               plsqlPackageSourceAttributeList AS packageItemList END "NAME" : #{plsqlPackageSource => #{packageNameStart@ => unwrap_2_list('$1'),
--                                                                                                                                           plsqlPackageSourceAttributeList@ => '$2',
--                                                                                                                                           asIs@ => unwrap_2_list('$3'),
--                                                                                                                                           packageItemList@ => '$4',
--                                                                                                                                           packageNameEnd@ => unwrap_2_list('$6')}}.
-- plsqlPackageSource ->          "NAME"               plsqlPackageSourceAttributeList IS packageItemList END "NAME" : #{plsqlPackageSource => #{packageNameStart@ => unwrap_2_list('$1'),
--                                                                                                                                           plsqlPackageSourceAttributeList@ => '$2',
--                                                                                                                                           asIs@ => unwrap_2_list('$3'),
--                                                                                                                                           packageItemList@ => '$4',
--                                                                                                                                           packageNameEnd@ => unwrap_2_list('$6')}}.
-- plsqlPackageSource ->          "NAME" sharingClause                                 AS packageItemList END      : #{plsqlPackageSource => #{packageNameStart@ => unwrap_2_list('$1'),
--                                                                                                                                           sharingClause@ => '$2',
--                                                                                                                                           asIs@ => unwrap_2_list('$3'),
--                                                                                                                                           packageItemList@ => '$4'}}.
-- plsqlPackageSource ->          "NAME" sharingClause                                 IS packageItemList END      : #{plsqlPackageSource => #{packageNameStart@ => unwrap_2_list('$1'),
--                                                                                                                                           sharingClause@ => '$2',
--                                                                                                                                           asIs@ => unwrap_2_list('$3'),
--                                                                                                                                           packageItemList@ => '$4'}}.
-- plsqlPackageSource ->          "NAME" sharingClause                                 AS packageItemList END "NAME" : #{plsqlPackageSource => #{packageNameStart@ => unwrap_2_list('$1'),
--                                                                                                                                           sharingClause@ => '$2',
--                                                                                                                                           asIs@ => unwrap_2_list('$3'),
--                                                                                                                                           packageItemList@ => '$4',
--                                                                                                                                           packageNameEnd@ => unwrap_2_list('$6')}}.
-- plsqlPackageSource ->          "NAME" sharingClause                                 IS packageItemList END "NAME" : #{plsqlPackageSource => #{packageNameStart@ => unwrap_2_list('$1'),
--                                                                                                                                           sharingClause@ => '$2',
--                                                                                                                                           asIs@ => unwrap_2_list('$3'),
--                                                                                                                                           packageItemList@ => '$4',
--                                                                                                                                           packageNameEnd@ => unwrap_2_list('$6')}}.
-- plsqlPackageSource ->          "NAME" sharingClause plsqlPackageSourceAttributeList AS packageItemList END      : #{plsqlPackageSource => #{packageNameStart@ => unwrap_2_list('$1'),
--                                                                                                                                           sharingClause@ => '$2',
--                                                                                                                                           plsqlPackageSourceAttributeList@ => '$3',
--                                                                                                                                           asIs@ => unwrap_2_list('$4'),
--                                                                                                                                           packageItemList@ => '$5'}}.
-- plsqlPackageSource ->          "NAME" sharingClause plsqlPackageSourceAttributeList IS packageItemList END      : #{plsqlPackageSource => #{packageNameStart@ => unwrap_2_list('$1'),
--                                                                                                                                           sharingClause@ => '$2',
--                                                                                                                                           plsqlPackageSourceAttributeList@ => '$3',
--                                                                                                                                           asIs@ => unwrap_2_list('$4'),
--                                                                                                                                           packageItemList@ => '$5'}}.
-- plsqlPackageSource ->          "NAME" sharingClause plsqlPackageSourceAttributeList AS packageItemList END "NAME" : #{plsqlPackageSource => #{packageNameStart@ => unwrap_2_list('$1'),
--                                                                                                                                           sharingClause@ => '$2',
--                                                                                                                                           plsqlPackageSourceAttributeList@ => '$3',
--                                                                                                                                           asIs@ => unwrap_2_list('$4'),
--                                                                                                                                           packageItemList@ => '$5',
--                                                                                                                                           packageNameEnd@ => unwrap_2_list('$7')}}.
-- plsqlPackageSource ->          "NAME" sharingClause plsqlPackageSourceAttributeList IS packageItemList END "NAME" : #{plsqlPackageSource => #{packageNameStart@ => unwrap_2_list('$1'),
--                                                                                                                                           sharingClause@ => '$2',
--                                                                                                                                           plsqlPackageSourceAttributeList@ => '$3',
--                                                                                                                                           asIs@ => unwrap_2_list('$4'),
--                                                                                                                                           packageItemList@ => '$5',
--                                                                                                                                           packageNameEnd@ => unwrap_2_list('$7')}}.
-- plsqlPackageSource -> "NAME" '.' "NAME"                                               AS packageItemList END      : #{plsqlPackageSource => #{packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                                                                           asIs@ => unwrap_2_list('$4'),
--                                                                                                                                           packageItemList@ => '$5'}}.
-- plsqlPackageSource -> "NAME" '.' "NAME"                                               IS packageItemList END      : #{plsqlPackageSource => #{packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                                                                           asIs@ => unwrap_2_list('$4'),
--                                                                                                                                           packageItemList@ => '$5'}}.
-- plsqlPackageSource -> "NAME" '.' "NAME"                                               AS packageItemList END "NAME" : #{plsqlPackageSource => #{packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                                                                           asIs@ => unwrap_2_list('$4'),
--                                                                                                                                           packageItemList@ => '$5',
--                                                                                                                                           packageNameEnd@ => unwrap_2_list('$7')}}.
-- plsqlPackageSource -> "NAME" '.' "NAME"                                               IS packageItemList END "NAME" : #{plsqlPackageSource => #{packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                                                                           asIs@ => unwrap_2_list('$4'),
--                                                                                                                                           packageItemList@ => '$5',
--                                                                                                                                           packageNameEnd@ => unwrap_2_list('$7')}}.
-- plsqlPackageSource -> "NAME" '.' "NAME"               plsqlPackageSourceAttributeList AS packageItemList END      : #{plsqlPackageSource => #{packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                                                                           plsqlPackageSourceAttributeList@ => '$4',
--                                                                                                                                           asIs@ => unwrap_2_list('$5'),
--                                                                                                                                           packageItemList@ => '$6'}}.
-- plsqlPackageSource -> "NAME" '.' "NAME"               plsqlPackageSourceAttributeList IS packageItemList END      : #{plsqlPackageSource => #{packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                                                                           plsqlPackageSourceAttributeList@ => '$4',
--                                                                                                                                           asIs@ => unwrap_2_list('$5'),
--                                                                                                                                           packageItemList@ => '$6'}}.
-- plsqlPackageSource -> "NAME" '.' "NAME"               plsqlPackageSourceAttributeList AS packageItemList END "NAME" : #{plsqlPackageSource => #{packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                                                                           plsqlPackageSourceAttributeList@ => '$4',
--                                                                                                                                           asIs@ => unwrap_2_list('$5'),
--                                                                                                                                           packageItemList@ => '$6',
--                                                                                                                                           packageNameEnd@ => unwrap_2_list('$8')}}.
-- plsqlPackageSource -> "NAME" '.' "NAME"               plsqlPackageSourceAttributeList IS packageItemList END "NAME" : #{plsqlPackageSource => #{packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                                                                           plsqlPackageSourceAttributeList@ => '$4',
--                                                                                                                                           asIs@ => unwrap_2_list('$5'),
--                                                                                                                                           packageItemList@ => '$6',
--                                                                                                                                           packageNameEnd@ => unwrap_2_list('$8')}}.
-- plsqlPackageSource -> "NAME" '.' "NAME" sharingClause                                 AS packageItemList END      : #{plsqlPackageSource => #{packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                                                                           sharingClause@ => '$4',
--                                                                                                                                           asIs@ => unwrap_2_list('$5'),
--                                                                                                                                           packageItemList@ => '$6'}}.
-- plsqlPackageSource -> "NAME" '.' "NAME" sharingClause                                 IS packageItemList END      : #{plsqlPackageSource => #{packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                                                                           sharingClause@ => '$4',
--                                                                                                                                           asIs@ => unwrap_2_list('$5'),
--                                                                                                                                           packageItemList@ => '$6'}}.
-- plsqlPackageSource -> "NAME" '.' "NAME" sharingClause                                 AS packageItemList END "NAME" : #{plsqlPackageSource => #{packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                                                                           sharingClause@ => '$4',
--                                                                                                                                           asIs@ => unwrap_2_list('$5'),
--                                                                                                                                           packageItemList@ => '$6',
--                                                                                                                                           packageNameEnd@ => unwrap_2_list('$8')}}.
-- plsqlPackageSource -> "NAME" '.' "NAME" sharingClause                                 IS packageItemList END "NAME" : #{plsqlPackageSource => #{packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                                                                           sharingClause@ => '$4',
--                                                                                                                                           asIs@ => unwrap_2_list('$5'),
--                                                                                                                                           packageItemList@ => '$6',
--                                                                                                                                           packageNameEnd@ => unwrap_2_list('$8')}}.
-- plsqlPackageSource -> "NAME" '.' "NAME" sharingClause plsqlPackageSourceAttributeList AS packageItemList END      : #{plsqlPackageSource => #{packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                                                                           sharingClause@ => '$4',
--                                                                                                                                           plsqlPackageSourceAttributeList@ => '$5',
--                                                                                                                                           asIs@ => unwrap_2_list('$6'),
--                                                                                                                                           packageItemList@ => '$7'}}.
-- plsqlPackageSource -> "NAME" '.' "NAME" sharingClause plsqlPackageSourceAttributeList IS packageItemList END      : #{plsqlPackageSource => #{packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                                                                           sharingClause@ => '$4',
--                                                                                                                                           plsqlPackageSourceAttributeList@ => '$5',
--                                                                                                                                           asIs@ => unwrap_2_list('$6'),
--                                                                                                                                           packageItemList@ => '$7'}}.
-- plsqlPackageSource -> "NAME" '.' "NAME" sharingClause plsqlPackageSourceAttributeList AS packageItemList END "NAME" : #{plsqlPackageSource => #{packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                                                                           sharingClause@ => '$4',
--                                                                                                                                           plsqlPackageSourceAttributeList@ => '$5',
--                                                                                                                                           asIs@ => unwrap_2_list('$6'),
--                                                                                                                                           packageItemList@ => '$7',
--                                                                                                                                           packageNameEnd@ => unwrap_2_list('$9')}}.
-- plsqlPackageSource -> "NAME" '.' "NAME" sharingClause plsqlPackageSourceAttributeList IS packageItemList END "NAME" : #{plsqlPackageSource => #{packageNameStart@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                                                                           sharingClause@ => '$4',
--                                                                                                                                           plsqlPackageSourceAttributeList@ => '$5',
--                                                                                                                                           asIs@ => unwrap_2_list('$6'),
--                                                                                                                                           packageItemList@ => '$7',
--                                                                                                                                           packageNameEnd@ => unwrap_2_list('$9')}}.

PlsqlPackageSource01.                       PlsqlPackageSource ::=            "NAME"                                               "AS" PackageItemList "END"        ;
PlsqlPackageSource02.                       PlsqlPackageSource ::=            "NAME"                                               "IS" PackageItemList "END"        ;
PlsqlPackageSource03.                       PlsqlPackageSource ::=            "NAME"                                               "AS" PackageItemList "END" "NAME" ;
PlsqlPackageSource04.                       PlsqlPackageSource ::=            "NAME"                                               "IS" PackageItemList "END" "NAME" ;
PlsqlPackageSource05.                       PlsqlPackageSource ::=            "NAME"               PlsqlPackageSourceAttributeList "AS" PackageItemList "END"        ;
PlsqlPackageSource06.                       PlsqlPackageSource ::=            "NAME"               PlsqlPackageSourceAttributeList "IS" PackageItemList "END"        ;
PlsqlPackageSource07.                       PlsqlPackageSource ::=            "NAME"               PlsqlPackageSourceAttributeList "AS" PackageItemList "END" "NAME" ;
PlsqlPackageSource08.                       PlsqlPackageSource ::=            "NAME"               PlsqlPackageSourceAttributeList "IS" PackageItemList "END" "NAME" ;
PlsqlPackageSource09.                       PlsqlPackageSource ::=            "NAME" SharingClause                                 "AS" PackageItemList "END"        ;
PlsqlPackageSource10.                       PlsqlPackageSource ::=            "NAME" SharingClause                                 "IS" PackageItemList "END"        ;
PlsqlPackageSource11.                       PlsqlPackageSource ::=            "NAME" SharingClause                                 "AS" PackageItemList "END" "NAME" ;
PlsqlPackageSource12.                       PlsqlPackageSource ::=            "NAME" SharingClause                                 "IS" PackageItemList "END" "NAME" ;
PlsqlPackageSource13.                       PlsqlPackageSource ::=            "NAME" SharingClause PlsqlPackageSourceAttributeList "AS" PackageItemList "END"        ;
PlsqlPackageSource14.                       PlsqlPackageSource ::=            "NAME" SharingClause PlsqlPackageSourceAttributeList "IS" PackageItemList "END"        ;
PlsqlPackageSource15.                       PlsqlPackageSource ::=            "NAME" SharingClause PlsqlPackageSourceAttributeList "AS" PackageItemList "END" "NAME" ;
PlsqlPackageSource16.                       PlsqlPackageSource ::=            "NAME" SharingClause PlsqlPackageSourceAttributeList "IS" PackageItemList "END" "NAME" ;
PlsqlPackageSource17.                       PlsqlPackageSource ::= "NAME" "." "NAME"                                               "AS" PackageItemList "END"        ;
PlsqlPackageSource18.                       PlsqlPackageSource ::= "NAME" "." "NAME"                                               "IS" PackageItemList "END"        ;
PlsqlPackageSource19.                       PlsqlPackageSource ::= "NAME" "." "NAME"                                               "AS" PackageItemList "END" "NAME" ;
PlsqlPackageSource20.                       PlsqlPackageSource ::= "NAME" "." "NAME"                                               "IS" PackageItemList "END" "NAME" ;
PlsqlPackageSource21.                       PlsqlPackageSource ::= "NAME" "." "NAME"               PlsqlPackageSourceAttributeList "AS" PackageItemList "END"        ;
PlsqlPackageSource22.                       PlsqlPackageSource ::= "NAME" "." "NAME"               PlsqlPackageSourceAttributeList "IS" PackageItemList "END"        ;
PlsqlPackageSource23.                       PlsqlPackageSource ::= "NAME" "." "NAME"               PlsqlPackageSourceAttributeList "AS" PackageItemList "END" "NAME" ;
PlsqlPackageSource24.                       PlsqlPackageSource ::= "NAME" "." "NAME"               PlsqlPackageSourceAttributeList "IS" PackageItemList "END" "NAME" ;
PlsqlPackageSource25.                       PlsqlPackageSource ::= "NAME" "." "NAME" SharingClause                                 "AS" PackageItemList "END"        ;
PlsqlPackageSource26.                       PlsqlPackageSource ::= "NAME" "." "NAME" SharingClause                                 "IS" PackageItemList "END"        ;
PlsqlPackageSource27.                       PlsqlPackageSource ::= "NAME" "." "NAME" SharingClause                                 "AS" PackageItemList "END" "NAME" ;
PlsqlPackageSource28.                       PlsqlPackageSource ::= "NAME" "." "NAME" SharingClause                                 "IS" PackageItemList "END" "NAME" ;
PlsqlPackageSource29.                       PlsqlPackageSource ::= "NAME" "." "NAME" SharingClause PlsqlPackageSourceAttributeList "AS" PackageItemList "END"        ;
PlsqlPackageSource30.                       PlsqlPackageSource ::= "NAME" "." "NAME" SharingClause PlsqlPackageSourceAttributeList "IS" PackageItemList "END"        ;
PlsqlPackageSource31.                       PlsqlPackageSource ::= "NAME" "." "NAME" SharingClause PlsqlPackageSourceAttributeList "AS" PackageItemList "END" "NAME" ;
PlsqlPackageSource32.                       PlsqlPackageSource ::= "NAME" "." "NAME" SharingClause PlsqlPackageSourceAttributeList "IS" PackageItemList "END" "NAME" ;

-- privilegeRoleAnnotationList -> objectPrivilegeAnnotation                             : ['$1'].
-- privilegeRoleAnnotationList -> objectPrivilegeAnnotation privilegeRoleAnnotationList : ['$1' | '$2'].
-- privilegeRoleAnnotationList -> roleAnnotation                                        : ['$1'].
-- privilegeRoleAnnotationList -> roleAnnotation            privilegeRoleAnnotationList : ['$1' | '$2'].
-- privilegeRoleAnnotationList -> systemPrivilegeAnnotation                             : ['$1'].
-- privilegeRoleAnnotationList -> systemPrivilegeAnnotation privilegeRoleAnnotationList : ['$1' | '$2'].

PrivilegeRoleAnnotationList01.                  PrivilegeRoleAnnotationList ::= ObjectPrivilegeAnnotation                             ;
PrivilegeRoleAnnotationList02.                  PrivilegeRoleAnnotationList ::= ObjectPrivilegeAnnotation PrivilegeRoleAnnotationList ;
PrivilegeRoleAnnotationList03.                  PrivilegeRoleAnnotationList ::= RoleAnnotation                                        ;
PrivilegeRoleAnnotationList04.                  PrivilegeRoleAnnotationList ::= RoleAnnotation            PrivilegeRoleAnnotationList ;
PrivilegeRoleAnnotationList05.                  PrivilegeRoleAnnotationList ::= SystemPrivilegeAnnotation                             ;
PrivilegeRoleAnnotationList06.                  PrivilegeRoleAnnotationList ::= SystemPrivilegeAnnotation PrivilegeRoleAnnotationList ;

-- Level 05 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- objectPrivilegeAnnotation -> '--<>' OBJECT_PRIVILEGE objectPrivilegeType '=' NAME          : #{objectPrivilegeAnnotation => #{type@ => unwrap_2_list('$2'),
--                                                                                                                               object@ => unwrap_2_list('$5'),
--                                                                                                                               privilegeType@ => unwrap_2_list('$3')}}.
-- objectPrivilegeAnnotation -> '--<>' OBJECT_PRIVILEGE objectPrivilegeType '=' NAME '.' NAME : #{objectPrivilegeAnnotation => #{type@ => unwrap_2_list('$2'),
--                                                                                                                               object@ => lists:append([unwrap_2_list('$5'), ".", unwrap_2_list('$7')]),
--                                                                                                                               privilegeType@ => unwrap_2_list('$3')}}.

ObjectPrivilegeAnnotation01.                ObjectPrivilegeAnnotation ::= "--<>" "OBJECT_PRIVILEGE" ObjectPrivilegeType "=" "NAME"            ;
ObjectPrivilegeAnnotation02.                ObjectPrivilegeAnnotation ::= "--<>" "OBJECT_PRIVILEGE" ObjectPrivilegeType "=" "NAME" "." "NAME" ;

-- packageItemList -> packageItemSimple                      : ['$1'].
-- packageItemList -> packageItemConditional                 : ['$1'].
-- packageItemList -> packageItemSimple      packageItemList : ['$1' | '$2'].
-- packageItemList -> packageItemConditional packageItemList : ['$1' | '$2'].

PackageItemList01.                          PackageItemList ::= PackageItemSimple                      ;
PackageItemList02.                          PackageItemList ::= PackageItemConditional                 ;
PackageItemList03.                          PackageItemList ::= PackageItemSimple      PackageItemList ;
PackageItemList04.                          PackageItemList ::= PackageItemConditional PackageItemList ;

-- plsqlPackageSourceAttributeList -> plsqlPackageSourceAttribute                                 : ['$1'].
-- plsqlPackageSourceAttributeList -> plsqlPackageSourceAttribute plsqlPackageSourceAttributeList : ['$1' | '$2'].

PlsqlPackageSourceAttributeList01.          PlsqlPackageSourceAttributeList ::= PlsqlPackageSourceAttribute                                 ;
PlsqlPackageSourceAttributeList02.          PlsqlPackageSourceAttributeList ::= PlsqlPackageSourceAttribute PlsqlPackageSourceAttributeList ;

-- roleAnnotation -> '--<>' ROLE '=' NAME : #{roleAnnotation => #{type@ => unwrap_2_list('$2'),
--                                                                role@ => '$2'}}.

RoleAnnotation01.                           RoleAnnotation ::= "--<>" "ROLE" "=" "NAME" ;

-- sharingClause -> SHARING '=' METADATA : #{sharingClause => unwrap_2_list('$3')}.
-- sharingClause -> SHARING '=' NONE     : #{sharingClause => unwrap_2_list('$3')}.

SharingClause01.                            SharingClause ::= "SHARING" "=" "METADATA" ;
SharingClause02.                            SharingClause ::= "SHARING" "=" "NONE"     ;

-- systemPrivilegeAnnotation -> '--<>' SYSTEM_PRIVILEGE '=' systemPrivilegeType : #{systemPrivilegeAnnotation => #{type@ => unwrap_2_list('$2'),
--                                                                                                                 privilegeType@ => unwrap_2_list('$4')}}.

SystemPrivilegeAnnotation01.                SystemPrivilegeAnnotation ::= "--<>" "SYSTEM_PRIVILEGE" "=" SystemPrivilegeType ;

-- Level 06 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- objectPrivilegeType -> ALTER                     : unwrap_2_list('$1').
-- objectPrivilegeType -> DEBUG                     : unwrap_2_list('$1').
-- objectPrivilegeType -> DELETE                    : unwrap_2_list('$1').
-- objectPrivilegeType -> EXECUTE                   : unwrap_2_list('$1').
-- objectPrivilegeType -> FLASHBACK ARCHIVE         : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- objectPrivilegeType -> INDEX                     : unwrap_2_list('$1').
-- objectPrivilegeType -> INHERIT PRIVILEGES        : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- objectPrivilegeType -> INHERIT REMOTE PRIVILEGES : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
-- objectPrivilegeType -> INSERT                    : unwrap_2_list('$1').
-- objectPrivilegeType -> KEEP SEQUENCE             : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- objectPrivilegeType -> MERGE VIEW                : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- objectPrivilegeType -> ON COMMIT REFRESH         : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
-- objectPrivilegeType -> QUERY REWRITE             : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- objectPrivilegeType -> READ                      : unwrap_2_list('$1').
-- objectPrivilegeType -> REFERENCES                : unwrap_2_list('$1').
-- objectPrivilegeType -> SELECT                    : unwrap_2_list('$1').
-- objectPrivilegeType -> TRANSLATE SQL             : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- objectPrivilegeType -> UNDER                     : unwrap_2_list('$1').
-- objectPrivilegeType -> UPDATE                    : unwrap_2_list('$1').
-- objectPrivilegeType -> USE                       : unwrap_2_list('$1').
-- objectPrivilegeType -> WRITE                     : unwrap_2_list('$1').

ObjectPrivilegeType01.                      ObjectPrivilegeType ::= "ALTER"                         ;
ObjectPrivilegeType02.                      ObjectPrivilegeType ::= "DEBUG"                         ;
ObjectPrivilegeType03.                      ObjectPrivilegeType ::= "DELETE"                        ;
ObjectPrivilegeType04.                      ObjectPrivilegeType ::= "EXECUTE"                       ;
ObjectPrivilegeType05.                      ObjectPrivilegeType ::= "FLASHBACK" "ARCHIVE"           ;
ObjectPrivilegeType06.                      ObjectPrivilegeType ::= "INDEX"                         ;
ObjectPrivilegeType07.                      ObjectPrivilegeType ::= "INHERIT" "PRIVILEGES"          ;
ObjectPrivilegeType08.                      ObjectPrivilegeType ::= "INHERIT" "REMOTE" "PRIVILEGES" ;
ObjectPrivilegeType09.                      ObjectPrivilegeType ::= "INSERT"                        ;
ObjectPrivilegeType10.                      ObjectPrivilegeType ::= "KEEP" "SEQUENCE"               ;
ObjectPrivilegeType11.                      ObjectPrivilegeType ::= "MERGE" "VIEW"                  ;
ObjectPrivilegeType12.                      ObjectPrivilegeType ::= "ON" "CCOMMIT" "REFRESH"        ;
ObjectPrivilegeType13.                      ObjectPrivilegeType ::= "QUERY" "REWRITE"               ;
ObjectPrivilegeType14.                      ObjectPrivilegeType ::= "READ"                          ;
ObjectPrivilegeType15.                      ObjectPrivilegeType ::= "REFERENCES"                    ;
ObjectPrivilegeType16.                      ObjectPrivilegeType ::= "SELECT"                        ;
ObjectPrivilegeType17.                      ObjectPrivilegeType ::= "TRANSLATE" "SQL"               ;
ObjectPrivilegeType18.                      ObjectPrivilegeType ::= "UNDER"                         ;
ObjectPrivilegeType19.                      ObjectPrivilegeType ::= "UPDATE"                        ;
ObjectPrivilegeType20.                      ObjectPrivilegeType ::= "USE"                           ;
ObjectPrivilegeType21.                      ObjectPrivilegeType ::= "WRITE"                         ;

-- packageItem -> packageFunctionDeclaration  : '$1'.
-- packageItem -> packageProcedureDeclaration : '$1'.

PackageItem01.                              PackageItem ::= PackageFunctionDeclaration  ;
PackageItem02.                              PackageItem ::= PackageProcedureDeclaration ;

-- packageItemConditional -> '$ELSE'                     packageItem  '$END' : #{packageItemConditional => #{start@ => unwrap_2_list('$1'),
--                                                                                                           packageItem@ => '$2',
--                                                                                                           end@ => unwrap_2_list('$3')}}.
-- packageItemConditional -> '$ELSIF' expression '$THEN' packageItem         : #{packageItemConditional => #{start@ => unwrap_2_list('$1'),
--                                                                                                           expression@ => '$2',
--                                                                                                           packageItem@ => '$4'}}.
-- packageItemConditional -> '$ELSIF' expression '$THEN' packageItem  '$END' : #{packageItemConditional => #{start@ => unwrap_2_list('$1'),
--                                                                                                           expression@ => '$2',
--                                                                                                           packageItem@ => '$4',
--                                                                                                           end@ => unwrap_2_list('$5')}}.
-- packageItemConditional -> '$IF'    expression '$THEN' packageItem         : #{packageItemConditional => #{start@ => unwrap_2_list('$1'),
--                                                                                                           expression@ => '$2',
--                                                                                                           packageItem@ => '$4'}}.
-- packageItemConditional -> '$IF'    expression '$THEN' packageItem  '$END' : #{packageItemConditional => #{start@ => unwrap_2_list('$1'),
--                                                                                                           expression@ => '$2',
--                                                                                                           packageItem@ => '$4',
--                                                                                                           end@ => unwrap_2_list('$5')}}.

PackageItemConditional01.                   PackageItemConditional ::= "$ELSE"                     PackageItem  "$END" ;
PackageItemConditional02.                   PackageItemConditional ::= "$ELSIF" Expression "$THEN" PackageItem         ;
PackageItemConditional03.                   PackageItemConditional ::= "$ELSIF" Expression "$THEN" PackageItem  "$END" ;
PackageItemConditional04.                   PackageItemConditional ::= "$IF"    Expression "$THEN" PackageItem         ;
PackageItemConditional05.                   PackageItemConditional ::= "$IF"    Expression "$THEN" PackageItem  "$END" ;

-- packageItemSimple -> packageItem : #{packageItemSimple => #{packageItem@ => '$1'}}.

PackageItemSimple01.                        PackageItemSimple ::= PackageItem ;

-- plsqlPackageSourceAttribute -> accessibleByClause     : #{plsqlPackageSourceAttribute => '$1'}.
-- plsqlPackageSourceAttribute -> defaultCollationClause : #{plsqlPackageSourceAttribute => '$1'}.
-- plsqlPackageSourceAttribute -> invokerRightsClause    : #{plsqlPackageSourceAttribute => '$1'}.

PlsqlPackageSourceAttribute01.              PlsqlPackageSourceAttribute ::= AccessibleByClause     ;
PlsqlPackageSourceAttribute02.              PlsqlPackageSourceAttribute ::= DefaultCollationClause ;
PlsqlPackageSourceAttribute03.              PlsqlPackageSourceAttribute ::= InvokerRightsClause    ;

-- systemPrivilegeType -> ALTER DATABASE         : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- systemPrivilegeType -> ALTER SESSION          : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- systemPrivilegeType -> CREATE ANY CONTEXT     : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
-- systemPrivilegeType -> CREATE ANY CREDENTIAL  : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
-- systemPrivilegeType -> CREATE ANY DIRECTORY   : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
-- systemPrivilegeType -> CREATE CREDENTIAL      : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- systemPrivilegeType -> CREATE EXTERNAL JOB    : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
-- systemPrivilegeType -> CREATE JOB             : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- systemPrivilegeType -> CREATE PROCEDURE       : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- systemPrivilegeType -> CREATE SEQUENCE        : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- systemPrivilegeType -> CREATE SESSION         : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- systemPrivilegeType -> CREATE TABLE           : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- systemPrivilegeType -> CREATE TRIGGER         : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- systemPrivilegeType -> CREATE TYPE            : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- systemPrivilegeType -> CREATE VIEW            : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- systemPrivilegeType -> DROP ANY DIRECTORY     : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
-- systemPrivilegeType -> FLASHBACK ANY TABLE    : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
-- systemPrivilegeType -> INHERIT ANY PRIVILEGES : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
-- systemPrivilegeType -> SELECT ANY DIRECTORY   : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
-- systemPrivilegeType -> SELECT ANY TABLE       : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')]).
-- systemPrivilegeType -> SET CONTAINER          : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).
-- systemPrivilegeType -> SYSDBA                 : unwrap_2_list('$1').
-- systemPrivilegeType -> UNLIMITED TABLESPACE   : lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2')]).

SystemPrivilegeType01.                      SystemPrivilegeType ::= "ALTER" "DATABASE"           ;
SystemPrivilegeType02.                      SystemPrivilegeType ::= "ALTER" "SESSION"            ;
SystemPrivilegeType03.                      SystemPrivilegeType ::= "CREATE" "ANY" "CONTEXT"     ;
SystemPrivilegeType04.                      SystemPrivilegeType ::= "CREATE" "ANY" "CREDENTIAL"  ;
SystemPrivilegeType05.                      SystemPrivilegeType ::= "CREATE" "ANY" "DIRECTORY"   ;
SystemPrivilegeType06.                      SystemPrivilegeType ::= "CREATE" "CREDENTIAL"        ;
SystemPrivilegeType07.                      SystemPrivilegeType ::= "CREATE" "EXTERNAL" "JOB"    ;
SystemPrivilegeType08.                      SystemPrivilegeType ::= "CREATE" "JOB"               ;
SystemPrivilegeType09.                      SystemPrivilegeType ::= "CREATE" "PROCEDURE"         ;
SystemPrivilegeType10.                      SystemPrivilegeType ::= "CREATE" "SEQUENCE"          ;
SystemPrivilegeType11.                      SystemPrivilegeType ::= "CREATE" "SESSION"           ;
SystemPrivilegeType12.                      SystemPrivilegeType ::= "CREATE" "TABLE"             ;
SystemPrivilegeType13.                      SystemPrivilegeType ::= "CREATE" "TRIGGER"           ;
SystemPrivilegeType14.                      SystemPrivilegeType ::= "CREATE" "TYPE"              ;
SystemPrivilegeType15.                      SystemPrivilegeType ::= "CREATE" "VIEW"              ;
SystemPrivilegeType16.                      SystemPrivilegeType ::= "DROP" "ANY" "DIRECTORY"     ;
SystemPrivilegeType17.                      SystemPrivilegeType ::= "FLASHBACK" "ANY" "TABLE"    ;
SystemPrivilegeType18.                      SystemPrivilegeType ::= "INHERIT" "ANY" "PRIVILEGES" ;
SystemPrivilegeType19.                      SystemPrivilegeType ::= "SELECT" "ANY" "DIRECTORY"   ;
SystemPrivilegeType20.                      SystemPrivilegeType ::= "SELECT" "ANY" "TABLE"       ;
SystemPrivilegeType21.                      SystemPrivilegeType ::= "SET" "CONTAINER"            ;
SystemPrivilegeType22.                      SystemPrivilegeType ::= "SYSDBA"                     ;
SystemPrivilegeType23.                      SystemPrivilegeType ::= "UNLIMITED" "TABLESPACE"     ;

-- Level 07 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- accessibleByClause -> ACCESSIBLE BY accessorCommaList : #{accessibleByClause => #{accessorCommaList@ => '$3'}}.

AccessibleByClause01.                       AccessibleByClause ::= "ACCESSIBLE" "BY" AccessorCommaList ;

-- defaultCollationClause -> DEFAULT COLLATION USING_NLS_COMP : #{defaultCollationClause => lists:append([unwrap_2_list('$1'), " ", unwrap_2_list('$2'), " ", unwrap_2_list('$3')])}.

DefaultCollationClause01.                   DefaultCollationClause ::= "DEFAULT" "COLLATION" "USING_NLS_COMP" ;

-- invokerRightsClause -> AUTHID CURRENT_USER : #{invokerRightsClause => unwrap_2_list('$2')}.
-- invokerRightsClause -> AUTHID DEFINER      : #{invokerRightsClause => unwrap_2_list('$2')}.

InvokerRightsClause01.                      InvokerRightsClause ::= "AUTHID" "CURRENT_USER" ;
InvokerRightsClause02.                      InvokerRightsClause ::= "AUTHID" "DEFINER"      ;

-- packageFunctionDeclaration ->                    functionHeading                                         ';' : #{packageFunctionDeclaration  => #{functionHeading@ => '$1'}}.
-- packageFunctionDeclaration ->                    functionHeading packageFunctionDeclarationAttributeList ';' : #{packageFunctionDeclaration  => #{functionHeading@ => '$1',
--                                                                                                                                                   packageFunctionDeclarationAttributeList@ => '$2'}}.
-- packageFunctionDeclaration -> functionAnnotation functionHeading                                         ';' : #{packageFunctionDeclaration  => #{functionAnnotation@ => '$1',
--                                                                                                                                                   functionHeading@ => '$2'}}.
-- packageFunctionDeclaration -> functionAnnotation functionHeading packageFunctionDeclarationAttributeList ';' : #{packageFunctionDeclaration  => #{functionAnnotation@ => '$1',
--                                                                                                                                                   functionHeading@ => '$2',
--                                                                                                                                                   packageFunctionDeclarationAttributeList@ => '$3'}}.

PackageFunctionDeclaration01.               PackageFunctionDeclaration ::=                    FunctionHeading                                         ";" ;
PackageFunctionDeclaration02.               PackageFunctionDeclaration ::=                    FunctionHeading PackageFunctionDeclarationAttributeList ";" ;
PackageFunctionDeclaration03.               PackageFunctionDeclaration ::= FunctionAnnotation FunctionHeading                                         ";" ;
PackageFunctionDeclaration04.               PackageFunctionDeclaration ::= FunctionAnnotation FunctionHeading PackageFunctionDeclarationAttributeList ";" ;

-- packageProcedureDeclaration ->                     procedureHeading                    ';' : #{packageProcedureDeclaration  => #{procedureHeading@ => '$1'}}.
-- packageProcedureDeclaration ->                     procedureHeading accessibleByClause ';' : #{packageProcedureDeclaration  => #{procedureHeading@ => '$1',
--                                                                                                                                  accessibleByClause@ => '$2'}}.
-- packageProcedureDeclaration -> procedureAnnotation procedureHeading                    ';' : #{packageProcedureDeclaration  => #{procedureAnnotation@ => '$1',
--                                                                                                                                  procedureHeading@ => '$2'}}.
-- packageProcedureDeclaration -> procedureAnnotation procedureHeading accessibleByClause ';' : #{packageProcedureDeclaration  => #{procedureAnnotation@ => '$1',
--                                                                                                                                  procedureHeading@ => '$2',
--                                                                                                                                  accessibleByClause@ => '$3'}}.

PackageProcedureDeclaration01.              PackageProcedureDeclaration ::=                     ProcedureHeading                    ";" ;
PackageProcedureDeclaration02.              PackageProcedureDeclaration ::=                     ProcedureHeading AccessibleByClause ";" ;
PackageProcedureDeclaration03.              PackageProcedureDeclaration ::= ProcedureAnnotation ProcedureHeading                    ";" ;
PackageProcedureDeclaration04.              PackageProcedureDeclaration ::= ProcedureAnnotation ProcedureHeading AccessibleByClause ";" ;

-- Level 08 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- accessorCommaList -> accessor                       : ['$1'].
-- accessorCommaList -> accessor ',' accessorCommaList : ['$1' | '$3'].

AccessorCommaList01.                        AccessorCommaList ::= Accessor                       ;
AccessorCommaList02.                        AccessorCommaList ::= Accessor "," AccessorCommaList ;

-- functionAnnotation ->                                                         privilegeRoleAnnotationList : #{functionAnnotation => #{privilegeRoleAnnotationList@ => '$1'}}.
-- functionAnnotation ->                          functionSimpleLegacyAnnotation                             : #{functionAnnotation => #{functionLegacySimpleAnnotation@ => '$1'}}.
-- functionAnnotation ->                          functionSimpleLegacyAnnotation privilegeRoleAnnotationList : #{functionAnnotation => #{functionLegacySimpleAnnotation@ => '$1',
--                                                                                                                                       privilegeRoleAnnotationList@ => '$2'}}.
-- functionAnnotation -> functionLegacyAnnotation                                                            : #{functionAnnotation => #{functionLegacyAnnotation@ => '$1'}}.
-- functionAnnotation -> functionLegacyAnnotation                                privilegeRoleAnnotationList : #{functionAnnotation => #{functionLegacyAnnotation@ => '$1',
--                                                                                                                                       privilegeRoleAnnotationList@ => '$2'}}.
-- functionAnnotation -> functionLegacyAnnotation functionSimpleLegacyAnnotation                             : #{functionAnnotation => #{functionLegacyAnnotation@ => '$1',
--                                                                                                                                       functionLegacySimpleAnnotation@ => '$2'}}.
-- functionAnnotation -> functionLegacyAnnotation functionSimpleLegacyAnnotation privilegeRoleAnnotationList : #{functionAnnotation => #{functionLegacyAnnotation@ => '$1',
--                                                                                                                                       functionLegacySimpleAnnotation@ => '$2',
--                                                                                                                                       privilegeRoleAnnotationList@ => '$3'}}.

FunctionAnnotation01.                       FunctionAnnotation ::=                                                         PrivilegeRoleAnnotationList ;
FunctionAnnotation02.                       FunctionAnnotation ::=                          FunctionSimpleLegacyAnnotation                             ;
FunctionAnnotation03.                       FunctionAnnotation ::=                          FunctionSimpleLegacyAnnotation PrivilegeRoleAnnotationList ;
FunctionAnnotation04.                       FunctionAnnotation ::= FunctionLegacyAnnotation                                                            ;
FunctionAnnotation05.                       FunctionAnnotation ::= FunctionLegacyAnnotation                                PrivilegeRoleAnnotationList ;
FunctionAnnotation06.                       FunctionAnnotation ::= FunctionLegacyAnnotation FunctionSimpleLegacyAnnotation                             ;
FunctionAnnotation07.                       FunctionAnnotation ::= FunctionLegacyAnnotation FunctionSimpleLegacyAnnotation PrivilegeRoleAnnotationList ;

-- functionHeading -> FUNCTION "NAME"                                       RETURN dataType : #{functionHeading => #{name@ => unwrap_2_list('$2'),
--                                                                                                                 return@ => '$4'}}.
-- functionHeading -> FUNCTION "NAME" '(' parameterDeclarationCommaList ')' RETURN dataType : #{functionHeading => #{name@ => unwrap_2_list('$2'),
--                                                                                                                 parameterDeclarationCommaList@ => '$4',
--                                                                                                                 return@ => '$7'}}.

FunctionHeading01.                          FunctionHeading ::= "FUNCTION" "NAME"                                       "RETURN" DataType ;
FunctionHeading02.                          FunctionHeading ::= "FUNCTION" "NAME" "(" ParameterDeclarationCommaList ")" "RETURN" DataType ;

-- packageFunctionDeclarationAttributeList -> packageFunctionDeclarationAttribute                                         : ['$1'].
-- packageFunctionDeclarationAttributeList -> packageFunctionDeclarationAttribute packageFunctionDeclarationAttributeList : ['$1' | '$2'].

PackageFunctionDeclarationAttributeList01.  PackageFunctionDeclarationAttributeList ::= PackageFunctionDeclarationAttribute                                         ;
PackageFunctionDeclarationAttributeList02.  PackageFunctionDeclarationAttributeList ::= PackageFunctionDeclarationAttribute PackageFunctionDeclarationAttributeList ;

-- procedureAnnotation ->                                                                                   privilegeRoleAnnotationList : #{procedureAnnotation => #{privilegeRoleAnnotationList@ => '$1'}}.
-- procedureAnnotation ->                                                         procedureLegacyAnnotation                             : #{procedureAnnotation => #{procedureLegacyAnnotation@ => '$1'}}.
-- procedureAnnotation ->                                                         procedureLegacyAnnotation privilegeRoleAnnotationList : #{procedureAnnotation => #{procedureLegacyAnnotation@ => '$1',
--                                                                                                                                                                   privilegeRoleAnnotationList@ => '$2'}}.
-- procedureAnnotation ->                          functionSimpleLegacyAnnotation                                                       : #{procedureAnnotation => #{functionLegacySimpleAnnotation@ => '$1'}}.
-- procedureAnnotation ->                          functionSimpleLegacyAnnotation                           privilegeRoleAnnotationList : #{procedureAnnotation => #{functionLegacySimpleAnnotation@ => '$1',
--                                                                                                                                                                   privilegeRoleAnnotationList@ => '$2'}}.
-- procedureAnnotation ->                          functionSimpleLegacyAnnotation procedureLegacyAnnotation                             : #{procedureAnnotation => #{functionLegacySimpleAnnotation@ => '$1',
--                                                                                                                                                                   procedureLegacyAnnotation@ => '$2'}}.
-- procedureAnnotation ->                          functionSimpleLegacyAnnotation procedureLegacyAnnotation privilegeRoleAnnotationList : #{procedureAnnotation => #{functionLegacySimpleAnnotation@ => '$1',
--                                                                                                                                                                   procedureLegacyAnnotation@ => '$2',
--                                                                                                                                                                   privilegeRoleAnnotationList@ => '$3'}}.
-- procedureAnnotation -> functionLegacyAnnotation                                                                                      : #{procedureAnnotation => #{functionLegacyAnnotation@ => '$1'}}.
-- procedureAnnotation -> functionLegacyAnnotation                                                          privilegeRoleAnnotationList : #{procedureAnnotation => #{functionLegacyAnnotation@ => '$1',
--                                                                                                                                                                   privilegeRoleAnnotationList@ => '$2'}}.
-- procedureAnnotation -> functionLegacyAnnotation                                procedureLegacyAnnotation                             : #{procedureAnnotation => #{functionLegacyAnnotation@ => '$1',
--                                                                                                                                                                   procedureLegacyAnnotation@ => '$2'}}.
-- procedureAnnotation -> functionLegacyAnnotation                                procedureLegacyAnnotation privilegeRoleAnnotationList : #{procedureAnnotation => #{functionLegacyAnnotation@ => '$1',
--                                                                                                                                                                   procedureLegacyAnnotation@ => '$2',
--                                                                                                                                                                   privilegeRoleAnnotationList@ => '$3'}}.
-- procedureAnnotation -> functionLegacyAnnotation functionSimpleLegacyAnnotation                                                       : #{procedureAnnotation => #{functionLegacyAnnotation@ => '$1',
--                                                                                                                                                                   functionLegacySimpleAnnotation@ => '$2'}}.
-- procedureAnnotation -> functionLegacyAnnotation functionSimpleLegacyAnnotation                           privilegeRoleAnnotationList : #{procedureAnnotation => #{functionLegacyAnnotation@ => '$1',
--                                                                                                                                                                   functionLegacySimpleAnnotation@ => '$2',
--                                                                                                                                                                   privilegeRoleAnnotationList@ => '$3'}}.
-- procedureAnnotation -> functionLegacyAnnotation functionSimpleLegacyAnnotation procedureLegacyAnnotation                             : #{procedureAnnotation => #{functionLegacyAnnotation@ => '$1',
--                                                                                                                                                                   functionLegacySimpleAnnotation@ => '$2',
--                                                                                                                                                                   procedureLegacyAnnotation@ => '$3'}}.
-- procedureAnnotation -> functionLegacyAnnotation functionSimpleLegacyAnnotation procedureLegacyAnnotation privilegeRoleAnnotationList : #{procedureAnnotation => #{functionLegacyAnnotation@ => '$1',
--                                                                                                                                                                   functionLegacySimpleAnnotation@ => '$2',
--                                                                                                                                                                   procedureLegacyAnnotation@ => '$3',
--                                                                                                                                                                   privilegeRoleAnnotationList@ => '$4'}}.

ProcedureAnnotation01.                      ProcedureAnnotation ::=                                                                                    PrivilegeRoleAnnotationList ;
ProcedureAnnotation02.                      ProcedureAnnotation ::=                                                          ProcedureLegacyAnnotation                             ;
ProcedureAnnotation03.                      ProcedureAnnotation ::=                                                          ProcedureLegacyAnnotation PrivilegeRoleAnnotationList ;
ProcedureAnnotation04.                      ProcedureAnnotation ::=                           FunctionSimpleLegacyAnnotation                                                       ;
ProcedureAnnotation05.                      ProcedureAnnotation ::=                           FunctionSimpleLegacyAnnotation                           PrivilegeRoleAnnotationList ;
ProcedureAnnotation06.                      ProcedureAnnotation ::=                           FunctionSimpleLegacyAnnotation ProcedureLegacyAnnotation                             ;
ProcedureAnnotation07.                      ProcedureAnnotation ::=                           FunctionSimpleLegacyAnnotation ProcedureLegacyAnnotation PrivilegeRoleAnnotationList ;
ProcedureAnnotation08.                      ProcedureAnnotation ::= FunctionLegacyAnnotation                                                                                       ;
ProcedureAnnotation09.                      ProcedureAnnotation ::= FunctionLegacyAnnotation                                                           PrivilegeRoleAnnotationList ;
ProcedureAnnotation10.                      ProcedureAnnotation ::= FunctionLegacyAnnotation                                 ProcedureLegacyAnnotation                             ;
ProcedureAnnotation11.                      ProcedureAnnotation ::= FunctionLegacyAnnotation                                 ProcedureLegacyAnnotation PrivilegeRoleAnnotationList ;
ProcedureAnnotation12.                      ProcedureAnnotation ::= FunctionLegacyAnnotation  FunctionSimpleLegacyAnnotation                                                       ;
ProcedureAnnotation13.                      ProcedureAnnotation ::= FunctionLegacyAnnotation  FunctionSimpleLegacyAnnotation                           PrivilegeRoleAnnotationList ;
ProcedureAnnotation14.                      ProcedureAnnotation ::= FunctionLegacyAnnotation  FunctionSimpleLegacyAnnotation ProcedureLegacyAnnotation                             ;
ProcedureAnnotation15.                      ProcedureAnnotation ::= FunctionLegacyAnnotation  FunctionSimpleLegacyAnnotation ProcedureLegacyAnnotation PrivilegeRoleAnnotationList ;

-- procedureHeading -> PROCEDURE "NAME"                                       : #{procedureHeading => #{name@ => unwrap_2_list('$2')}}.
-- procedureHeading -> PROCEDURE "NAME" '(' parameterDeclarationCommaList ')' : #{procedureHeading => #{name@ => unwrap_2_list('$2'),
--                                                                                                      parameterDeclarationCommaList@ => '$4'}}.

ProcedureHeading01.                         ProcedureHeading ::= "PROCEDURE" "NAME"                                       ;
ProcedureHeading02.                         ProcedureHeading ::= "PROCEDURE" "NAME" "(" ParameterDeclarationCommaList ")" ;

-- Level 09 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- accessor ->                   "NAME" : #{accessor => #{name@ => unwrap_2_list('$1')}}.
-- accessor ->          "NAME" '.' "NAME" : #{accessor => #{name@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')])}}.
-- accessor -> unitKind          "NAME" : #{accessor => #{unitKind@ => '$1',
--                                                      name@ => unwrap_2_list('$2')}}.
-- accessor -> unitKind "NAME" '.' "NAME" : #{accessor => #{unitKind@ => '$1',
--                                                      name@ => lists:append([unwrap_2_list('$2'), ".", unwrap_2_list('$4')])}}.

Accessor01.                                 Accessor ::=                     "NAME" ;
Accessor02.                                 Accessor ::=          "NAME" "." "NAME" ;
Accessor03.                                 Accessor ::= UnitKind            "NAME" ;
Accessor04.                                 Accessor ::= UnitKind "NAME" "." "NAME" ;

-- dataType -> BFILE                                                            : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> BINARY_DOUBLE                                                    : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> BINARY_FLOAT                                                     : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> BINARY_INTEGER                                                   : #{dataType => #{class@ => plsql,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> BLOB                                                             : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> BOOLEAN                                                          : #{dataType => #{class@ => plsql,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> CHAR                                                             : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> CHAR          '(' INTNUM            ')'                          : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                size@ => unwrap_2_list('$3')}}.
-- dataType -> CHAR          '(' INTNUM     BYTE   ')'                          : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                size@ => unwrap_2_list('$3'),
--                                                                                                sizeType@ => unwrap_2_list('$4')}}.
-- dataType -> CHAR          '(' INTNUM     CHAR   ')'                          : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                size@ => unwrap_2_list('$3'),
--                                                                                                sizeType@ => unwrap_2_list('$4')}}.
-- dataType -> CLOB                                                             : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> DATE                                                             : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> FLOAT                                                            : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> FLOAT         '(' INTNUM            ')'                          : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                precision@ =>  unwrap_2_list('$3')}}.
-- dataType -> INTERVAL DAY                            TO SECOND                : #{dataType => #{class@ => sql,
--                                                                                                type@ => "INTERVAL DAY"}}.
-- dataType -> INTERVAL DAY  '(' INTNUM            ')' TO SECOND                : #{dataType => #{class@ => sql,
--                                                                                                type@ => "INTERVAL DAY",
--                                                                                                dayPrecision@ => unwrap_2_list('$4')}}.
-- dataType -> INTERVAL DAY                            TO SECOND '(' INTNUM ')' : #{dataType => #{class@ => sql,
--                                                                                                type@ => "INTERVAL DAY",
--                                                                                                secondPrecision@ => unwrap_2_list('$6')}}.
-- dataType -> INTERVAL DAY  '(' INTNUM            ')' TO SECOND '(' INTNUM ')' : #{dataType => #{class@ => sql,
--                                                                                                type@ => "INTERVAL DAY",
--                                                                                                dayPrecision@ => unwrap_2_list('$4'),
--                                                                                                secondPrecision@ => unwrap_2_list('$9')}}.
-- dataType -> INTERVAL YEAR                           TO MONTH                 : #{dataType => #{class@ => sql,
--                                                                                                type@ => "INTERVAL YEAR"}}.
-- dataType -> INTERVAL YEAR '(' INTNUM            ')' TO MONTH                 : #{dataType => #{class@ => sql,
--                                                                                                type@ => "INTERVAL YEAR",
--                                                                                                precision@ => unwrap_2_list('$4')}}.
-- dataType -> LONG RAW                                                         : #{dataType => #{class@ => sql,
--                                                                                                type@ => "LONG RAW'"}}.
-- dataType -> NAME                                                             : #{dataType => #{class@ => user_defined,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> NAME                   '%ROWTYPE'                                : #{dataType => #{class@ => user_defined,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                attribute@ => unwrap_2_list('$2')}}.
-- dataType -> NAME                   '%TYPE'                                   : #{dataType => #{class@ => user_defined,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                attribute@ => unwrap_2_list('$2')}}.
-- dataType -> NAME '.' NAME                                                    : #{dataType => #{class@ => user_defined,
--                                                                                                type@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')])}}.
-- dataType -> NAME '.' NAME          '%TYPE'                                   : #{dataType => #{class@ => user_defined,
--                                                                                                type@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                                attribute@ => unwrap_2_list('$4')}}.
-- dataType -> NAME '.' NAME                                                    : #{dataType => #{class@ => user_defined,
--                                                                                                type@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')])}}.
-- dataType -> NAME '.' NAME '.' NAME '%TYPE'                                   : #{dataType => #{class@ => user_defined,
--                                                                                                type@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3'), ".", unwrap_2_list('$5')]),
--                                                                                                attribute@ => unwrap_2_list('$6')}}.
-- dataType -> NCHAR         '(' INTNUM            ')'                          : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                size@ => unwrap_2_list('$3')}}.
-- dataType -> NCLOB                                                            : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> NUMBER                                                           : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> NUMBER        '(' INTNUM            ')'                          : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                precision@ => unwrap_2_list('$3')}}.
-- dataType -> NUMBER        '(' INTNUM ',' INTNUM ')'                          : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                precision@ => unwrap_2_list('$3'),
--                                                                                                scale@ =>  unwrap_2_list('$5')}}.
-- dataType -> NVARCHAR2     '(' INTNUM            ')'                          : #{dataType => #{class => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                size@ => unwrap_2_list('$3')}}.
-- dataType -> PLS_INTEGER                                                      : #{dataType => #{class@ => plsql,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> RAW           '(' INTNUM            ')'                          : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                size@ => unwrap_2_list('$3')}}.
-- dataType -> REF CURSOR                                                       : #{dataType => #{class@ => plsql,
--                                                                                                type@ => "REF CURSOR"}}.
-- dataType -> ROWID                                                            : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> TIMESTAMP                                                        : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> TIMESTAMP                               WITH       TIME ZONE     : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                timeZone@ => true}}.
-- dataType -> TIMESTAMP                               WITH LOCAL TIME ZONE     : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                timeZone@ => true,
--                                                                                                local@ => true}}.
-- dataType -> TIMESTAMP     '(' INTNUM            ')'                          : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                precision@ => unwrap_2_list('$3')}}.
-- dataType -> TIMESTAMP     '(' INTNUM            ')' WITH       TIME ZONE     : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                precision@ => unwrap_2_list('$3'),
--                                                                                                timeZone@ => true}}.
-- dataType -> TIMESTAMP     '(' INTNUM            ')' WITH LOCAL TIME ZONE     : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                precision@ => unwrap_2_list('$3'),
--                                                                                                timeZone@ => true,
--                                                                                                local@ => true}}.
-- dataType -> UROWID                                                           : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> UROWID        '(' INTNUM            ')'                          : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                size@ => unwrap_2_list('$3')}}.
-- dataType -> VARCHAR2                                                         : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1')}}.
-- dataType -> VARCHAR2      '(' INTNUM            ')'                          : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                size@ => unwrap_2_list('$3')}}.
-- dataType -> VARCHAR2      '(' INTNUM BYTE       ')'                          : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                size@ => unwrap_2_list('$3'),
--                                                                                                sizeType@ => unwrap_2_list('$4')}}.
-- dataType -> VARCHAR2      '(' INTNUM CHAR       ')'                          : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1'),
--                                                                                                size@ => unwrap_2_list('$3'),
--                                                                                                sizeType@ => unwrap_2_list('$4')}}.
-- dataType -> XMLTYPE                                                          : #{dataType => #{class@ => sql,
--                                                                                                type@ => unwrap_2_list('$1')}}.

DataType01.                                 DataType ::= "BFILE"                                                                      ;
DataType02.                                 DataType ::= "BINARY_DOUBLE"                                                              ;
DataType03.                                 DataType ::= "BINARY_FLOAT"                                                               ;
DataType04.                                 DataType ::= "BINARY_INTEGER"                                                             ;
DataType05.                                 DataType ::= "BLOB"                                                                       ;
DataType06.                                 DataType ::= "BOOLEAN"                                                                    ;
DataType07.                                 DataType ::= "CHAR"                                                                       ;
DataType08.                                 DataType ::= "CHAR"            "(" "INTNUM"            ")"                                ;
DataType09.                                 DataType ::= "CHAR"            "(" "INTNUM"     "BYTE" ")"                                ;
DataType10.                                 DataType ::= "CHAR"            "(" "INTNUM"     "CHAR" ")"                                ;
DataType11.                                 DataType ::= "CLOB"                                                                       ;
DataType12.                                 DataType ::= "DATE"                                                                       ;
DataType13.                                 DataType ::= "FLOAT"                                                                      ;
DataType14.                                 DataType ::= "FLOAT"           "(" "INTNUM"            ")"                                ;
DataType15.                                 DataType ::= "INTERVAL" "DAY"                              "TO" "SECOND"                  ;
DataType16.                                 DataType ::= "INTERVAL" "DAY"  "(" "INTNUM"            ")" "TO" "SECOND"                  ;
DataType17.                                 DataType ::= "INTERVAL" "DAY"                              "TO" "SECOND" "(" "INTNUM" ")" ;
DataType18.                                 DataType ::= "INTERVAL" "DAY"  "(" "INTNUM"            ")" "TO" "SECOND" "(" "INTNUM" ")" ;
DataType19.                                 DataType ::= "INTERVAL" "YEAR"                             "TO" "MONTH"                   ;
DataType20.                                 DataType ::= "INTERVAL" "YEAR" "(" "INTNUM"            ")" "TO" "MONTH"                   ;
DataType21.                                 DataType ::= "LONG" "RAW"                                                                 ;
DataType22.                                 DataType ::= "NAME"                                                                       ;
DataType23.                                 DataType ::= "NAME"                       "%ROWTYPE"                                      ;
DataType24.                                 DataType ::= "NAME"                       "%TYPE"                                         ;
DataType25.                                 DataType ::= "NAME" "." "NAME"                                                            ;
DataType26.                                 DataType ::= "NAME" "." "NAME"            "%TYPE"                                         ;
DataType27.                                 DataType ::= "NAME" "." "NAME" "." "NAME"                                                 ;
DataType28.                                 DataType ::= "NAME" "." "NAME" "." "NAME" "%TYPE"                                         ;
DataType29.                                 DataType ::= "NCHAR"         "(" "INTNUM"              ")"                                ;
DataType30.                                 DataType ::= "NCLOB"                                                                      ;
DataType31.                                 DataType ::= "NUMBER"                                                                     ;
DataType32.                                 DataType ::= "NUMBER"        "(" "INTNUM"              ")"                                ;
DataType33.                                 DataType ::= "NUMBER"        "(" "INTNUM" "," "INTNUM" ")"                                ;
DataType34.                                 DataType ::= "NVARCHAR2"     "(" "INTNUM"              ")"                                ;
DataType35.                                 DataType ::= "PLS_INTEGER"                                                                ;
DataType36.                                 DataType ::= "RAW"           "(" "INTNUM"              ")"                                ;
DataType37.                                 DataType ::= "REF" "CURSOR"                                                               ;
DataType38.                                 DataType ::= "ROWID"                                                                      ;
DataType39.                                 DataType ::= "TIMESTAMP"                                                                  ;
DataType40.                                 DataType ::= "TIMESTAMP"                                   "WITH"         "TIME" "ZONE"   ;
DataType41.                                 DataType ::= "TIMESTAMP"                                   "WITH" "LOCAL" "TIME" "ZONE"   ;
DataType42.                                 DataType ::= "TIMESTAMP"     "(" "INTNUM"              ")"                                ;
DataType43.                                 DataType ::= "TIMESTAMP"     "(" "INTNUM"              ")" "WITH"         "TIME" "ZONE"   ;
DataType44.                                 DataType ::= "TIMESTAMP"     "(" "INTNUM"              ")" "WITH" "LOCAL" "TIME" "ZONE"   ;
DataType45.                                 DataType ::= "UROWID"                                                                     ;
DataType46.                                 DataType ::= "UROWID"        "(" "INTNUM"              ")"                                ;
DataType47.                                 DataType ::= "VARCHAR2"                                                                   ;
DataType48.                                 DataType ::= "VARCHAR2"      "(" "INTNUM"              ")"                                ;
DataType49.                                 DataType ::= "VARCHAR2"      "(" "INTNUM" "BYTE"       ")"                                ;
DataType50.                                 DataType ::= "VARCHAR2"      "(" "INTNUM" "CHAR"       ")"                                ;
DataType51.                                 DataType ::= "XMLTYPE"                                                                    ;

-- functionLegacyAnnotation -> '--<>' LEGACY_NAME_FUNCTION '=' "NAME" : #{functionLegacyAnnotation => #{type@ => unwrap_2_list('$2'),
--                                                                                                    value@ => unwrap_2_list('$4')}}.

FunctionLegacyAnnotation01.                 FunctionLegacyAnnotation ::= "--<>" "LEGACY_NAME_FUNCTION" "=" "NAME" ;

-- functionSimpleLegacyAnnotation -> '--<>' LEGACY_NAME_FUNCTION_SIMPLE '=' NAME : #{functionSimpleLegacyAnnotation => #{type@ => unwrap_2_list('$2'),
--                                                                                                                       value@ => unwrap_2_list('$4')}}.
                                                                                                                      
FunctionSimpleLegacyAnnotation01.           FunctionSimpleLegacyAnnotation ::= "--<>" "LEGACY_NAME_FUNCTION_SIMPLe" "=" "NAME" ;

-- packageFunctionDeclarationAttribute -> accessibleByClause    : #{packageFunctionDeclarationAttribute => '$1'}.
-- packageFunctionDeclarationAttribute -> DETERMINISTIC         : #{packageFunctionDeclarationAttribute => unwrap_2_list('$1')}.
-- packageFunctionDeclarationAttribute -> parallelEnabledClause : #{packageFunctionDeclarationAttribute => '$1'}.
-- packageFunctionDeclarationAttribute -> pipelinedClause       : #{packageFunctionDeclarationAttribute => '$1'}.
-- packageFunctionDeclarationAttribute -> resultCacheClause     : #{packageFunctionDeclarationAttribute => '$1'}.

PackageFunctionDeclarationAttribute01.  PackageFunctionDeclarationAttribute ::= AccessibleByClause    ;
PackageFunctionDeclarationAttribute02.  PackageFunctionDeclarationAttribute ::= "DETERMINISTIC"       ;
PackageFunctionDeclarationAttribute03.  PackageFunctionDeclarationAttribute ::= ParallelEnabledClause ;
PackageFunctionDeclarationAttribute04.  PackageFunctionDeclarationAttribute ::= PipelinedClause       ;
PackageFunctionDeclarationAttribute05.  PackageFunctionDeclarationAttribute ::= ResultCacheClause     ;

-- parameterDeclarationCommaList -> parameterDeclarationHelper                                   : ['$1'].
-- parameterDeclarationCommaList -> parameterDeclarationHelper ',' parameterDeclarationCommaList : ['$1' | '$3'].

ParameterDeclarationCommaList01.            ParameterDeclarationCommaList ::= ParameterDeclarationHelper                               ;
ParameterDeclarationCommaList02.            ParameterDeclarationCommaList ::= ParameterDeclarationHelper ParameterDeclarationCommaList ;

-- parameterDeclarationHelper ->                     parameterDeclaration : #{parameterDeclarationHelper => #{parameterDeclaration@ => '$1'}}.
-- parameterDeclarationHelper -> parameterAnnotation parameterDeclaration : #{parameterDeclarationHelper => #{parameterAnnotation@ => '$1',
--                                                                                                            parameterDeclaration@ => '$2'}}.

ParameterDeclarationHelper01.               ParameterDeclarationHelper ::=                     ParameterDeclaration ;
ParameterDeclarationHelper02.               ParameterDeclarationHelper ::= ParameterAnnotation ParameterDeclaration ;

-- procedureLegacyAnnotation -> '--<>' LEGACY_NAME_PROCEDURE '=' "NAME" : #{procedureLegacyAnnotation => #{type@ => unwrap_2_list('$2'),
--                                                                                                       value@ => unwrap_2_list('$4')}}.

ProcedureLegacyAnnotation01.                ProcedureLegacyAnnotation ::= "--<>" "LEGACY_NAME_PROCEDURE" "=" "NAME" ;

-- Level 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- parameterAnnotation -> '--<>' LOGGER_TO_CHARACTER '=' FALSE : #{parameterAnnotation => #{type@ => unwrap_2_list('$2'),
--                                                                                          value@ => unwrap_2_list('$4')}}.
-- parameterAnnotation -> '--<>' LOGGER_TO_CHARACTER '=' NONE  : #{parameterAnnotation => #{type@ => unwrap_2_list('$2'),
--                                                                                          value@ => unwrap_2_list('$4')}}.

ParameterAnnotation01.                      ParameterAnnotation ::= "--<>" "LOGGER_TO_CHARACTER" "=" "FALSE" ;
ParameterAnnotation02.                      ParameterAnnotation ::= "--<>" "LOGGER_TO_CHARACTER" "=" "NONE" ;

-- parameterDeclaration -> "NAME"               dataType         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
--                                                                                           dataType@ => '$2'}}.
-- parameterDeclaration -> "NAME"               dataType default : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
--                                                                                           dataType@ => '$2',
--                                                                                           default@ => '$3'}}.
-- parameterDeclaration -> "NAME" IN            dataType         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
--                                                                                           mode@ => unwrap_2_list('$2'),
--                                                                                           dataType@ => '$3'}}.
-- parameterDeclaration -> "NAME" IN            dataType default : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
--                                                                                           mode@ => unwrap_2_list('$2'),
--                                                                                           dataType@ => '$3',
--                                                                                           default@ => '$4'}}.
-- parameterDeclaration -> "NAME"    OUT        dataType         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
--                                                                                           mode@ => unwrap_2_list('$2'),
--                                                                                           dataType@ => '$3'}}.
-- parameterDeclaration -> "NAME"    OUT NOCOPY dataType         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
--                                                                                           mode@ => unwrap_2_list('$2'),
--                                                                                           nocopy@ => unwrap_2_list('$3'),
--                                                                                           dataType@ => '$4'}}.
-- parameterDeclaration -> "NAME" IN OUT        dataType         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
--                                                                                           mode@ => "IN OUT",
--                                                                                           dataType@ => '$4'}}.
-- parameterDeclaration -> "NAME" IN OUT NOCOPY dataType         : #{parameterDeclaration => #{name@ => unwrap_2_list('$1'),
--                                                                                           mode@ => "IN OUT",
--                                                                                           nocopy@ => unwrap_2_list('$4'),
--                                                                                           dataType@ => '$5'}}.

ParameterDeclaration01.                     ParameterDeclaration ::= "NAME"                     DataType         ;
ParameterDeclaration02.                     ParameterDeclaration ::= "NAME"                     DataType Default ;
ParameterDeclaration03.                     ParameterDeclaration ::= "NAME" "IN"                DataType         ;
ParameterDeclaration04.                     ParameterDeclaration ::= "NAME" "IN"                DataType Default ;
ParameterDeclaration05.                     ParameterDeclaration ::= "NAME"      "OUT"          DataType         ;
ParameterDeclaration06.                     ParameterDeclaration ::= "NAME"      "OUT" "NOCOPY" DataType         ;
ParameterDeclaration07.                     ParameterDeclaration ::= "NAME" "IN" "OUT"          DataType         ;
ParameterDeclaration08.                     ParameterDeclaration ::= "NAME" "IN" "OUT" "NOCOPY" DataType         ;

-- unitKind -> FUNCTION  : unwrap_2_list('$1').
-- unitKind -> PACKAGE   : unwrap_2_list('$1').
-- unitKind -> PROCEDURE : unwrap_2_list('$1').
-- unitKind -> TRIGGER   : unwrap_2_list('$1').
-- unitKind -> TYPE      : unwrap_2_list('$1').

UnitKind01.                                 UnitKind ::= "FUNCTION"  ;
UnitKind02.                                 UnitKind ::= "PACKAGE"   ;
UnitKind03.                                 UnitKind ::= "PROCEDURE" ;
UnitKind04.                                 UnitKind ::= "TRIGGER"   ;
UnitKind05.                                 UnitKind ::= "TYPE"      ;

-- Level 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- default -> ':='    expression : #{default => #{type@ => unwrap_2_list('$1'),
--                                                value@ => '$2'}}.
-- default -> DEFAULT expression : #{default => #{type@ => unwrap_2_list('$1'),
--                                                value@ => '$2'}}.

Default01.                                  Default ::= ":="      Expression ;
Default02.                                  Default ::= "DEFAULT" Expression ;

-- expression -> columnRef                        : #{expression => '$1'}.
-- expression -> functionRef                      : #{expression => '$1'}.
-- expression -> literal                          : #{expression => '$1'}.
-- expression -> NULLX                            : #{expression => "NULL"}.
-- expression -> parameterRef                     : #{expression => '$1'}.
-- expression -> '(' expression ')'               : #{expression => #{operator@ => '(',
--                                                                    expression@ => '$2'}}.
-- expression -> 'NOT'                 expression : #{expression => #{operator@ => 'NOT',
--                                                                    expression@ => '$2'}}.
-- expression -> unaryAddOrSubtract    expression : #{expression => #{operator@ => '$1',
--                                                                    expression@ => '$2'}}.
-- expression -> expression 'AND'      expression : #{expression => #{operator@ => 'AND',
--                                                                    expressionLeft@ => '$1',
--                                                                    expressionRight@ => '$3'}}.
-- expression -> expression 'OR'       expression : #{expression => #{operator@ => 'OR',
--                                                                    expressionLeft@ => '$1',
--                                                                    expressionRight@ => '$3'}}.
-- expression -> expression '+'        expression : #{expression => #{operator@ => '+',
--                                                                    expressionLeft@ => '$1',
--                                                                    expressionRight@ => '$3'}}.
-- expression -> expression '-'        expression : #{expression => #{operator@ => '-',
--                                                                    expressionLeft@ => '$1',
--                                                                    expressionRight@ => '$3'}}.
-- expression -> expression '/'        expression : #{expression => #{operator@ => '/',
--                                                                    expressionLeft@ => '$1',
--                                                                    expressionRight@ => '$3'}}.
-- expression -> expression '*'        expression : #{expression => #{operator@ => '*',
--                                                                    expressionLeft@ => '$1',
--                                                                    expressionRight@ => '$3'}}.
-- expression -> expression '||'       expression : #{expression => #{operator@ => '||',
--                                                                    expressionLeft@ => '$1',
--                                                                    expressionRight@ => '$3'}}.
-- expression -> expression '='        expression : #{expression => #{operator@ => '=',
--                                                                    expressionLeft@ => '$1',
--                                                                    expressionRight@ => '$3'}}.
-- expression -> expression COMPARISON expression : #{expression => #{operator@ => unwrap_2_atom('$2'),
--                                                                    expressionLeft@ => '$1',
--                                                                    expressionRight@ => '$3'}}.

Expression01.                               Expression ::= ColumnRef                           ;
Expression02.                               Expression ::= FunctionRef                         ;
Expression03.                               Expression ::= Literal                             ;
Expression04.                               Expression ::= "NULL"                              ;
Expression05.                               Expression ::= ParameterRef                        ;
Expression06.                               Expression ::= "(" Expression ")"                  ;
Expression07.                               Expression ::= "NOT"                    Expression ;
Expression08.                               Expression ::= UnaryAddOrSubtract       Expression ;
Expression09.                               Expression ::= Expression "AND"         Expression ;
Expression10.                               Expression ::= Expression "OR"          Expression ;
Expression11.                               Expression ::= Expression "+"           Expression ;
Expression12.                               Expression ::= Expression "-"           Expression ;
Expression13.                               Expression ::= Expression "/"           Expression ;
Expression14.                               Expression ::= Expression "*"           Expression ;
Expression15.                               Expression ::= Expression "||"          Expression ;
Expression16.                               Expression ::= Expression "="           Expression ;
Expression17.                               Expression ::= Expression "COMPARISON"  Expression ;

-- parallelEnabledClause -> PARALLEL_ENABLED '(' PARTITION "NAME" BY ANY                                              ')' : #{parallelEnabledClause => #{name@ => unwrap_2_list('$4'),
--                                                                                                                                                     type@ => unwrap_2_list('$6')}}.
-- parallelEnabledClause -> PARALLEL_ENABLED '(' PARTITION "NAME" BY HASH  '(' columnRefCommaList ')'                 ')' : #{parallelEnabledClause => #{name@ => unwrap_2_list('$4'),
--                                                                                                                                                     type@ => unwrap_2_list('$6'),
--                                                                                                                                                     columnRefCommaList@ => '$8'}}.
-- parallelEnabledClause -> PARALLEL_ENABLED '(' PARTITION "NAME" BY HASH  '(' columnRefCommaList ')' streamingClause ')' : #{parallelEnabledClause => #{name@ => unwrap_2_list('$4'),
--                                                                                                                                                     type@ => unwrap_2_list('$6'),
--                                                                                                                                                     columnRefCommaList@ => '$8',
--                                                                                                                                                     streamingClause@ => '$10'}}.
-- parallelEnabledClause -> PARALLEL_ENABLED '(' PARTITION "NAME" BY RANGE '(' columnRefCommaList ')'                 ')' : #{parallelEnabledClause => #{name@ => unwrap_2_list('$4'),
--                                                                                                                                                     type@ => unwrap_2_list('$6'),
--                                                                                                                                                     columnRefCommaList@ => '$8'}}.
-- parallelEnabledClause -> PARALLEL_ENABLED '(' PARTITION "NAME" BY RANGE '(' columnRefCommaList ')' streamingClause ')' : #{parallelEnabledClause => #{name@ => unwrap_2_list('$4'),
--                                                                                                                                                     type@ => unwrap_2_list('$6'),
--                                                                                                                                                     columnRefCommaList@ => '$8',
--                                                                                                                                                     streamingClause@ => '$10'}}.
-- parallelEnabledClause -> PARALLEL_ENABLED '(' PARTITION "NAME" BY VALUE '(' columnRef          ')'                 ')' : #{parallelEnabledClause => #{name@ => unwrap_2_list('$4'),
--                                                                                                                                                     type@ => unwrap_2_list('$6'),
--                                                                                                                                                     columnRefCommaList@ => ['$8']}}.

ParallelEnabledClause01.                    ParallelEnabledClause ::= "PARALLEL_ENABLED" "(" "PARTITION" "NAME" "BY" "ANY"                                              ")" ;
ParallelEnabledClause02.                    ParallelEnabledClause ::= "PARALLEL_ENABLED" "(" "PARTITION" "NAME" "BY" "HASH"  "(" ColumnRefCommaList ")"                 ")" ;
ParallelEnabledClause03.                    ParallelEnabledClause ::= "PARALLEL_ENABLED" "(" "PARTITION" "NAME" "BY" "HASH"  "(" ColumnRefCommaList ")" StreamingClause ")" ;
ParallelEnabledClause04.                    ParallelEnabledClause ::= "PARALLEL_ENABLED" "(" "PARTITION" "NAME" "BY" "RANGE" "(" ColumnRefCommaList ")"                 ")" ;
ParallelEnabledClause05.                    ParallelEnabledClause ::= "PARALLEL_ENABLED" "(" "PARTITION" "NAME" "BY" "RANGE" "(" ColumnRefCommaList ")" StreamingClause ")" ;
ParallelEnabledClause06.                    ParallelEnabledClause ::= "PARALLEL_ENABLED" "(" "PARTITION" "NAME" "BY" "VALUE" "(" ColumnRef          ")"                 ")" ;

-- pipelinedClause -> PIPELINED                   USING            "NAME" : #{pipelinedClause => #{implementationPackage@ => unwrap_2_list('$3')}}.
-- pipelinedClause -> PIPELINED                   USING "NAME" '.' "NAME" : #{pipelinedClause => #{implementationPackage@ => lists:append([unwrap_2_list('$3'), ".", unwrap_2_list('$5')])}}.
-- pipelinedClause -> PIPELINED ROW   POLYMORPHIC USING            "NAME" : #{pipelinedClause => #{type@ => unwrap_2_list('$2'),
--                                                                                             implementationPackage@ => unwrap_2_list('$5')}}.
-- pipelinedClause -> PIPELINED ROW   POLYMORPHIC USING "NAME" '.' "NAME" : #{pipelinedClause => #{type@ => unwrap_2_list('$2'),
--                                                                                             implementationPackage@ => lists:append([unwrap_2_list('$5'), ".", unwrap_2_list('$7')])}}.
-- pipelinedClause -> PIPELINED TABLE POLYMORPHIC USING            "NAME" : #{pipelinedClause => #{type@ => unwrap_2_list('$2'),
--                                                                                             implementationPackage@ => unwrap_2_list('$5')}}.
-- pipelinedClause -> PIPELINED TABLE POLYMORPHIC USING "NAME" '.' "NAME" : #{pipelinedClause => #{type@ => unwrap_2_list('$2'),
--                                                                                             implementationPackage@ => lists:append([unwrap_2_list('$5'), ".", unwrap_2_list('$7')])}}.

PipelinedClause01.                          PipelinedClause ::= "PIPELINED"                       "USING"            "NAME" ;
PipelinedClause02.                          PipelinedClause ::= "PIPELINED"                       "USING" "NAME" "." "NAME" ;
PipelinedClause03.                          PipelinedClause ::= "PIPELINED" "ROW"   "POLYMORPHIC" "USING"            "NAME" ;
PipelinedClause04.                          PipelinedClause ::= "PIPELINED" "ROW"   "POLYMORPHIC" "USING" "NAME" "." "NAME" ;
PipelinedClause05.                          PipelinedClause ::= "PIPELINED" "TABLE" "POLYMORPHIC" "USING"            "NAME" ;
PipelinedClause06.                          PipelinedClause ::= "PIPELINED" "TABLE" "POLYMORPHIC" "USING" "NAME" "." "NAME" ;

-- resultCacheClause -> RESULT_CACHE                                       : #{resultCacheClause => #{dataSourceCommaList@ => {}}}.
-- resultCacheClause -> RESULT_CACHE RELIES_ON '(' dataSourceCommaList ')' : #{resultCacheClause => #{dataSourceCommaList@ => '$4'}}.

ResultCacheClause01.                        ResultCacheClause ::= "RESULT_CACHE"                                         ;
ResultCacheClause02.                        ResultCacheClause ::= "RESULT_CACHE" "RELIES_ON" "(" DataSourceCommaList ")" ;

-- Level 12 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- columnRef -> "NAME"                               : #{columnRef => unwrap_2_list('$1')}.
-- columnRef -> "NAME" '.' "NAME"                      : #{columnRef => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')])}.
-- columnRef -> "NAME" '.' "NAME" '.' "NAME"             : #{columnRef => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3'), ".", unwrap_2_list('$5')])}.
-- columnRef -> "NAME" '(' '+' ')'                   : #{columnRef => lists:append([unwrap_2_list('$1'), "(+)"])}.
-- columnRef -> "NAME" '.' "NAME" '(' '+' ')'          : #{columnRef => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3'), "(+)"])}.
-- columnRef -> "NAME" '.' "NAME" '.' "NAME" '(' '+' ')' : #{columnRef => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3'), ".", unwrap_2_list('$5'),"(+)"])}.
-- columnRef -> "NAME" '.' '*'                       : #{columnRef => lists:append([unwrap_2_list('$1'), ".*"])}.
-- columnRef -> "NAME" '.' "NAME" '.' '*'              : #{columnRef => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3'), ".*"])}.

ColumnRef01.                                ColumnRef ::= "NAME"                                   ;
ColumnRef02.                                ColumnRef ::= "NAME" "." "NAME"                        ;
ColumnRef03.                                ColumnRef ::= "NAME" "." "NAME" "." "NAME"             ;
ColumnRef04.                                ColumnRef ::= "NAME" "(" "+" ")"                       ;
ColumnRef05.                                ColumnRef ::= "NAME" "." "NAME" "(" "+" ")"            ;
ColumnRef06.                                ColumnRef ::= "NAME" "." "NAME" "." "NAME" "(" "+" ")" ;
ColumnRef07.                                ColumnRef ::= "NAME" "." "*"                           ;
ColumnRef08.                                ColumnRef ::= "NAME" "." "NAME" "." "*"                ;

-- dataSourceCommaList -> dataSource                         : ['$1'].
-- dataSourceCommaList -> dataSource ',' dataSourceCommaList : ['$1' | '$3'].

DataSourceCommaList01.                      DataSourceCommaList ::= DataSource                     ;
DataSourceCommaList02.                      DataSourceCommaList ::= DataSource DataSourceCommaList ;

-- streamingClause -> ORDER   expression BY '(' columnRefCommaList ')' : #{streamingClause => #{type@ => unwrap_2_list('$1'),
--                                                                                              expression@ => '$2',
--                                                                                              columnRefCommaList@ => '$5'}}.
-- streamingClause -> CLUSTER expression BY '(' columnRefCommaList ')' : #{streamingClause => #{type@ => unwrap_2_list('$1'),
--                                                                                              expression@ => '$2',
--                                                                                              columnRefCommaList@ => '$5'}}.

StreamingClause01.                          StreamingClause ::= "ORDER"   Expression "BY" "(" ColumnRefCommaList ")" ;
StreamingClause02.                          StreamingClause ::= "CLUSTER" Expression "BY" "(" ColumnRefCommaList ")" ;

-- Level 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- columnRefCommaList -> columnRef                        : ['$1'].
-- columnRefCommaList -> columnRef ',' columnRefCommaList : ['$1' | '$3'].

ColumnRefCommaList01.                       ColumnRefCommaList ::= ColumnRef                    ;
ColumnRefCommaList02.                       ColumnRefCommaList ::= ColumnRef ColumnRefCommaList ;

-- dataSource ->          "NAME" : #{dataSource => unwrap_2_list('$1')}.
-- dataSource -> "NAME" '.' "NAME" : #{dataSource => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')])}.

DataSource01.                               DataSource ::= "NAME"            ;
DataSource02.                               DataSource ::= "NAME" "." "NAME" ;

-- Level 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- functionRef -> "NAME"                   '('                      ')' : #{functionRef => #{name@ => unwrap_2_list('$1'),
--                                                                                         functionArgCommaList@ => '()'}}.
-- functionRef -> "NAME"                   '(' functionArgCommaList ')' : #{functionRef => #{name@ => unwrap_2_list('$1'),
--                                                                                         functionArgCommaList@ => make_list('$3')}}.
-- functionRef -> "NAME" '.' "NAME"          '('                      ')' : #{functionRef => #{name@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                         functionArgCommaList@ => '()'}}.
-- functionRef -> "NAME" '.' "NAME"          '(' functionArgCommaList ')' : #{functionRef => #{name@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3')]),
--                                                                                         functionArgCommaList@ => make_list('$5')}}.
-- functionRef -> "NAME" '.' "NAME" '.' "NAME" '('                      ')' : #{functionRef => #{name@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3'), ".", unwrap_2_list('$5')]),
--                                                                                         functionArgCommaList@ => '()'}}.
-- functionRef -> "NAME" '.' "NAME" '.' "NAME" '(' functionArgCommaList ')' : #{functionRef => #{name@ => lists:append([unwrap_2_list('$1'), ".", unwrap_2_list('$3'), ".", unwrap_2_list('$5')]),
--                                                                                         functionArgCommaList@ => make_list('$7')}}.

FunctionRef01.                              FunctionRef ::= "NAME"                       "("                      ")" ;
FunctionRef02.                              FunctionRef ::= "NAME"                       "(" FunctionArgCommaList ")" ;
FunctionRef03.                              FunctionRef ::= "NAME" "." "NAME"            "("                      ")" ;
FunctionRef04.                              FunctionRef ::= "NAME" "." "NAME"            "(" FunctionArgCommaList ")" ;
FunctionRef05.                              FunctionRef ::= "NAME" "." "NAME" "." "NAME" "("                      ")" ;
FunctionRef06.                              FunctionRef ::= "NAME" "." "NAME" "." "NAME" "(" FunctionArgCommaList ")" ;

-- literal -> APPROXNUM : #{literal => unwrap_2_list('$1')}.
-- literal -> FALSE     : #{literal => unwrap_2_list('$1')}.
-- literal -> INTNUM    : #{literal => unwrap_2_list('$1')}.
-- literal -> STRING    : #{literal => unwrap_2_list('$1')}.
-- literal -> TRUE      : #{literal => unwrap_2_list('$1')}.

Literal01.                                  Literal ::= "APPROXNUM" ;
Literal02.                                  Literal ::= "FALSE"     ;
Literal03.                                  Literal ::= "INTNUM"    ;
Literal04.                                  Literal ::= "STRING"    ;
Literal05.                                  Literal ::= "TRUE"      ;

-- parameterRef -> PARAMETER                     : #{parameterRef => unwrap_2_list('$1')}.
-- parameterRef -> PARAMETER           PARAMETER : #{parameterRef => #{parameterLeft@ => unwrap_2_list('$1'),
--                                                                     parameterRight@ => unwrap_2_list('$2')}}.
-- parameterRef -> PARAMETER INDICATOR PARAMETER : #{parameterRef => #{indicator@ => true,
--                                                                     parameterLeft@ => unwrap_2_list('$1'),
--                                                                     parameterRight@ => unwrap_2_list('$3')}}.

ParameterRef01.                             ParameterRef ::= "PARAMETER"                         ;
ParameterRef02.                             ParameterRef ::= "PARAMETER"             "PARAMETER" ;
ParameterRef03.                             ParameterRef ::= "PARAMETER" "INDICATOR" "PARAMETER" ;

-- unaryAddOrSubtract -> '+' : #{unaryAddOrSubtract => unwrap_2_list('$1')}.
-- unaryAddOrSubtract -> '-' : #{unaryAddOrSubtract => unwrap_2_list('$1')}.

UnaryAddOrSubtract01.                       UnaryAddOrSubtract ::= "+" ;
UnaryAddOrSubtract02.                       UnaryAddOrSubtract ::= "-" ;

-- Level 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- functionArgCommaList -> functionArg                          : ['$1'].
-- functionArgCommaList -> functionArg ',' functionArgCommaList : ['$1' | '$3'].

FunctionArgCommaList01.                     FunctionArgCommaList ::= FunctionArg                      ;
FunctionArgCommaList02.                     FunctionArgCommaList ::= FunctionArg FunctionArgCommaList ;

-- Level 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- functionArg -> expression            : #{functionArg => '$1'}.
-- functionArg -> "NAME" '=>' expression  : #{functionArg => #{name@ => unwrap_2_list('$1'),
--                                                           expression@ => '$3'}}.

FunctionArg01.                          FunctionArg ::= "NAME"                 ;
FunctionArg02.                          FunctionArg ::= "NAME" "=>" Expression ;

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- LBNF specifica
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

entrypoints PlsqlScript ;
